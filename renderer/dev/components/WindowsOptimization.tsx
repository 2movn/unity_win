import React, { useState, useEffect } from 'react';
import { Card, Row, Col, Button, Typography, Space, Table, Modal, Form, Input, Select, message, Tag, Descriptions, Divider, Tabs, Statistic, Progress, Alert, Switch, Tooltip, InputNumber } from 'antd';
import { WindowsOutlined, SettingOutlined, SafetyOutlined, ThunderboltFilled, DatabaseOutlined, ReloadOutlined, CheckCircleOutlined, ExclamationCircleOutlined, ClockCircleOutlined, InfoCircleOutlined, AppstoreOutlined, SyncOutlined, DeleteOutlined } from '@ant-design/icons';
import { gradientStyles, customStyles, tableStyles, modalStyles } from '../styles/theme';

const { Title, Text } = Typography;
const { Option } = Select;


interface ServiceInfo {
  Name: string;
  DisplayName: string;
  Description: string;
  Status: number;
  StartType: number;
  SafeToDisable: boolean;
  VietnameseName?: string;
  VietnameseDescription?: string;
  Category?: string;
  Impact?: string;
}

interface DriveInfo {
  drive: string;
  label: string;
  freeSpace: number;
  totalSpace: number;
  fileSystem: string;
  isWindowsDrive: boolean;
  isRemovable: boolean;
  isNetwork: boolean;
}

interface WindowsDefenderStatus {
  realTimeProtection: boolean | null;
  cloudProtection: boolean | null;
  automaticSampleSubmission: boolean | null;
}

interface WindowsUpdateStatus {
  automaticUpdatesEnabled: boolean;
  updateLevel: string;
  lastCheckTime: string;
}

const WindowsOptimization: React.FC = () => {
  const [servicesInfo, setServicesInfo] = useState<ServiceInfo[]>([]);
  const [defenderStatus, setDefenderStatus] = useState<WindowsDefenderStatus | null>(null);
  const [updateStatus, setUpdateStatus] = useState<WindowsUpdateStatus | null>(null);
  const [selectedServices, setSelectedServices] = useState<string[]>([]);
  const [virtualMemoryGB, setVirtualMemoryGB] = useState<number>(8);
  const [loading, setLoading] = useState(false);
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [startTypeFilter, setStartTypeFilter] = useState<string>('all');
  const [safeFilter, setSafeFilter] = useState<string>('all');
  const [networkStatus, setNetworkStatus] = useState<any>(null);

  useEffect(() => {
    loadStatus();
  }, []);

  const loadStatus = async () => {
    try {
      const [services, defender, update] = await Promise.all([
        window.electronAPI.getServicesInfo(),
        window.electronAPI.getWindowsDefenderStatus(),
        window.electronAPI.getWindowsUpdateStatus()
      ]);

      // Ensure services is an array
      if (Array.isArray(services)) {
        setServicesInfo(services);
      } else {
        console.error('Services kh√¥ng ph·∫£i l√† array:', services);
        setServicesInfo([]);
      }
      
      setDefenderStatus(defender);
      setUpdateStatus(update);
    } catch (error) {
      console.error('L·ªói khi load status:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin tr·∫°ng th√°i');
      setServicesInfo([]);
    }
  };

  const loadServicesOnly = async () => {
    try {
      const services = await window.electronAPI.getServicesInfo();
      if (Array.isArray(services)) {
        setServicesInfo(services);
      } else {
        console.error('Services kh√¥ng ph·∫£i l√† array:', services);
        setServicesInfo([]);
      }
    } catch (error) {
      console.error('L·ªói khi load services:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin services');
      setServicesInfo([]);
    }
  };

  const loadDefenderOnly = async () => {
    try {
      const defender = await window.electronAPI.getWindowsDefenderStatus();
      setDefenderStatus(defender);
    } catch (error) {
      console.error('L·ªói khi load defender status:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin Windows Defender');
    }
  };

  const loadUpdateOnly = async () => {
    try {
      const update = await window.electronAPI.getWindowsUpdateStatus();
      setUpdateStatus(update);
    } catch (error) {
      console.error('L·ªói khi load update status:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin Windows Update');
    }
  };

  const handleDisableDefender = async () => {
    Modal.confirm({
      title: 'T·∫Øt Windows Defender',
      content: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫Øt Windows Defender? ƒêi·ªÅu n√†y c√≥ th·ªÉ l√†m gi·∫£m b·∫£o m·∫≠t h·ªá th·ªëng.',
      onOk: async () => {
        setLoading(true);
        try {
          const result = await window.electronAPI.disableWindowsDefender();
          message.success(result.message);
          await loadDefenderOnly();
        } catch (error) {
          message.error('L·ªói khi t·∫Øt Windows Defender');
        } finally {
          setLoading(false);
        }
      }
    });
  };

  const handleOptimizeServices = async () => {
    if (selectedServices.length === 0) {
      message.warning('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt service ƒë·ªÉ t·ªëi ∆∞u');
      return;
    }

    Modal.confirm({
      title: 'T·ªëi ∆∞u Services',
      content: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫Øt ${selectedServices.length} services ƒë√£ ch·ªçn?`,
      onOk: async () => {
        setLoading(true);
        try {
          const result = await window.electronAPI.optimizeSelectedServices(selectedServices);
          
          // Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
          if (result.success) {
            message.success(result.message);
            
            // Hi·ªÉn th·ªã modal v·ªõi k·∫øt qu·∫£ chi ti·∫øt
            Modal.success({
              title: 'T·ªëi ∆∞u Services Th√†nh C√¥ng',
              content: (
                <div>
                  <p><strong>K·∫øt qu·∫£:</strong></p>
                  <p>‚úÖ ƒê√£ t·∫Øt th√†nh c√¥ng: {result.disabledCount}/{result.totalCount} services</p>
                  {result.failedServices && result.failedServices.length > 0 && (
                    <div>
                      <p>‚ùå Kh√¥ng th·ªÉ t·∫Øt: {result.failedServices.length} services</p>
                      <p style={{ fontSize: '12px', color: '#666' }}>
                        C√°c service kh√¥ng th·ªÉ t·∫Øt c√≥ th·ªÉ do quy·ªÅn h·∫°n ho·∫∑c ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng
                      </p>
                    </div>
                  )}
                  {result.successServices && result.successServices.length > 0 && (
                    <div>
                      <p>üìã Services ƒë√£ t·∫Øt:</p>
                      <div style={{ maxHeight: '200px', overflowY: 'auto', fontSize: '12px' }}>
                        {result.successServices.map((service, index) => (
                          <div key={index} style={{ padding: '2px 0' }}>
                            ‚Ä¢ {service}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ),
              width: 500,
            });
          } else {
            message.error('Kh√¥ng th·ªÉ t·∫Øt b·∫•t k·ª≥ service n√†o');
          }
          
          await loadServicesOnly();
          setSelectedServices([]);
        } catch (error) {
          console.error('L·ªói khi t·ªëi ∆∞u services:', error);
          message.error('L·ªói khi t·ªëi ∆∞u services gui');
        } finally {
          setLoading(false);
        }
      }
    });
  };

  const handleSetVirtualMemory = async () => {
    Modal.confirm({
      title: 'C√†i ƒë·∫∑t RAM ·∫£o',
      content: `B·∫°n c√≥ mu·ªën c√†i ƒë·∫∑t RAM ·∫£o ${virtualMemoryGB}GB?`,
      onOk: async () => {
        setLoading(true);
        try {
          const result = await window.electronAPI.setVirtualMemory(virtualMemoryGB);
          message.success(result.message);
        } catch (error) {
          message.error('L·ªói khi c√†i ƒë·∫∑t RAM ·∫£o');
        } finally {
          setLoading(false);
        }
      }
    });
  };

  const handleResetVirtualMemory = async () => {
    Modal.confirm({
      title: 'Tr·∫£ v·ªÅ RAM ·∫£o m·∫∑c ƒë·ªãnh',
      content: 'B·∫°n c√≥ mu·ªën tr·∫£ v·ªÅ c√†i ƒë·∫∑t RAM ·∫£o m·∫∑c ƒë·ªãnh c·ªßa Windows?',
      onOk: async () => {
        setLoading(true);
        try {
          const result = await window.electronAPI.resetVirtualMemory();
          message.success(result.message);
        } catch (error) {
          message.error('L·ªói khi tr·∫£ v·ªÅ RAM ·∫£o m·∫∑c ƒë·ªãnh');
        } finally {
          setLoading(false);
        }
      }
    });
  };

  const handleEnableWindowsUpdate = async () => {
    Modal.confirm({
      title: 'B·∫≠t Windows Update',
      content: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën b·∫≠t Windows Update?',
      onOk: async () => {
        setLoading(true);
        try {
          const result = await window.electronAPI.enableWindowsUpdate();
          message.success(result.message);
          await loadUpdateOnly();
        } catch (error) {
          message.error('L·ªói khi b·∫≠t Windows Update');
        } finally {
          setLoading(false);
        }
      }
    });
  };

  const handleOptimizePerformance = async () => {
    Modal.confirm({
      title: 'T·ªëi ∆∞u hi·ªáu su·∫•t h·ªá th·ªëng',
      content: (
        <div>
          <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·ªëi ∆∞u hi·ªáu su·∫•t h·ªá th·ªëng?</p>
          <p style={{ color: '#faad14', fontSize: '12px' }}>
            C√°c thay ƒë·ªïi s·∫Ω bao g·ªìm:
          </p>
          <ul style={{ fontSize: '12px', color: '#666' }}>
            <li>T·∫Øt ch·∫ø ƒë·ªô ng·ªß ƒë√¥ng (Hibernation)</li>
            <li>Chuy·ªÉn sang ch·∫ø ƒë·ªô High Performance</li>
            <li>T·∫Øt c√°c hi·ªáu ·ª©ng ƒë·ªï b√≥ng, di chuy·ªÉn</li>
            <li>T·∫Øt c√°c d·ªãch v·ª• kh√¥ng c·∫ßn thi·∫øt</li>
          </ul>
        </div>
      ),
      onOk: async () => {
        setLoading(true);
        try {
          const result = await window.electronAPI.getSystemPerformance();
          message.success('T·ªëi ∆∞u hi·ªáu su·∫•t h·ªá th·ªëng th√†nh c√¥ng');
        } catch (error) {
          message.error('L·ªói khi t·ªëi ∆∞u hi·ªáu su·∫•t');
        } finally {
          setLoading(false);
        }
      }
    });
  };

  const handleRemoveDefaultApps = async () => {
    Modal.confirm({
      title: 'G·ª° b·ªè ·ª©ng d·ª•ng m·∫∑c ƒë·ªãnh',
      content: (
        <div>
          <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën g·ª° b·ªè c√°c ·ª©ng d·ª•ng m·∫∑c ƒë·ªãnh?</p>
          <p style={{ color: '#faad14', fontSize: '12px' }}>
            C√°c ·ª©ng d·ª•ng s·∫Ω ƒë∆∞·ª£c g·ª° b·ªè:
          </p>
          <ul style={{ fontSize: '12px', color: '#666' }}>
            <li>Cortana</li>
            <li>OneDrive</li>
            <li>Windows Ink Workspace</li>
            <li>Tablet PC Components</li>
            <li>Windows Mixed Reality</li>
            <li>Tips, Ads & Suggestions</li>
            <li>Background Apps</li>
            <li>Windows Defender Antivirus Service</li>
          </ul>
        </div>
      ),
      onOk: async () => {
        setLoading(true);
        try {
          const result = await window.electronAPI.getSystemInfo();
          message.success('G·ª° b·ªè ·ª©ng d·ª•ng m·∫∑c ƒë·ªãnh th√†nh c√¥ng');
        } catch (error) {
          message.error('L·ªói khi g·ª° b·ªè ·ª©ng d·ª•ng m·∫∑c ƒë·ªãnh');
        } finally {
          setLoading(false);
        }
      }
    });
  };

  const handleDisableSpecificServices = async () => {
    Modal.confirm({
      title: 'T·∫Øt d·ªãch v·ª• kh√¥ng c·∫ßn thi·∫øt',
      content: (
        <div>
          <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫Øt c√°c d·ªãch v·ª• kh√¥ng c·∫ßn thi·∫øt?</p>
          <p style={{ color: '#faad14', fontSize: '12px' }}>
            C√°c d·ªãch v·ª• s·∫Ω ƒë∆∞·ª£c t·∫Øt:
          </p>
          <ul style={{ fontSize: '12px', color: '#666' }}>
            <li>Fax Service</li>
            <li>Remote Registry</li>
            <li>Windows Insider Service</li>
            <li>Windows Search</li>
            <li>Connected User Experiences and Telemetry</li>
            <li>Diagnostic Policy Service</li>
            <li>Superfetch (SysMain)</li>
            <li>Touch Keyboard and Handwriting Panel Service</li>
            <li>Windows Error Reporting Service</li>
            <li>Xbox Live Auth Manager</li>
            <li>Xbox Game Monitoring</li>
            <li>Xbox Live Networking Service</li>
            <li>Xbox Accessory Management Service</li>
          </ul>
        </div>
      ),
      onOk: async () => {
        setLoading(true);
        try {
          const result = await window.electronAPI.getServicesInfo();
          message.success('T·∫Øt d·ªãch v·ª• kh√¥ng c·∫ßn thi·∫øt th√†nh c√¥ng');
          await loadServicesOnly();
        } catch (error) {
          message.error('L·ªói khi t·∫Øt d·ªãch v·ª•');
        } finally {
          setLoading(false);
        }
      }
    });
  };

  // X·ª≠ l√Ω s·ª± ki·ªán filter
  const handleStatusFilterChange = (value: string) => {
    setStatusFilter(value);
  };

  const handleStartTypeFilterChange = (value: string) => {
    setStartTypeFilter(value);
  };

  const handleSafeFilterChange = (value: string) => {
    setSafeFilter(value);
  };

  // Helper functions
  const getServiceStatus = (status: number) => {
    switch (status) {
      case 1: return 'Stopped';
      case 2: return 'Start pending';
      case 3: return 'Stop pending';
      case 4: return 'Running';
      case 5: return 'Continue pending';
      case 6: return 'Pause pending';
      case 7: return 'Paused';
      default: return 'Unknown';
    }
  };

  const getServiceStartType = (startType: number) => {
    switch (startType) {
      case 0: return 'Boot';
      case 1: return 'System';
      case 2: return 'Automatic';
      case 3: return 'Manual';
      case 4: return 'Disabled';
      default: return 'Unknown';
    }
  };

  const getDefenderStatus = () => {
    if (!defenderStatus) return 'Unknown';
    return defenderStatus.realTimeProtection ? 'Enabled' : 'Disabled';
  };

  const getUpdateStatus = () => {
    if (!updateStatus) return 'Unknown';
    return updateStatus.automaticUpdatesEnabled ? 'Enabled' : 'Disabled';
  };

  const serviceColumns = [
    {
      title: 'T√™n Service',
      dataIndex: 'Name',
      key: 'Name',
      width: 150,
      render: (name: string, record: any) => (
        <div>
          <div style={{ fontWeight: 'bold', fontSize: '12px' }}>{name}</div>
          <div style={{ fontSize: '11px', color: '#666', marginTop: '2px' }}>
            {record.VietnameseName || record.DisplayName}
          </div>
        </div>
      ),
    },
    {
      title: 'M√¥ t·∫£',
      dataIndex: 'VietnameseDescription',
      key: 'VietnameseDescription',
      width: 400,
      render: (description: string, record: any) => (
        <div>
          <div style={{ fontSize: '12px', lineHeight: '1.4' }}>
            {record.VietnameseDescription || record.Description}
          </div>
          <div style={{ fontSize: '10px', color: '#999', marginTop: '4px' }}>
            <Tag color="blue">{record.Category || 'System'}</Tag>
            <Tag color={record.Impact === 'Th·∫•p' ? 'green' : record.Impact === 'Trung b√¨nh' ? 'orange' : 'red'}>
              {record.Impact || 'Unknown'}
            </Tag>
          </div>
        </div>
      ),
    },
    {
      title: 'Tr·∫°ng th√°i',
      dataIndex: 'Status',
      key: 'Status',
      width: 100,
      filters: [
        { text: 'T·∫•t c·∫£', value: 'all' },
        { text: 'Running', value: 'running' },
        { text: 'Stopped', value: 'stopped' },
        { text: 'Unknown', value: 'unknown' },
      ],
      filteredValue: statusFilter === 'all' ? null : [statusFilter],
      onFilter: (value: string, record: any) => {
        if (value === 'all') return true;
        const statusText = getServiceStatus(record.Status).toLowerCase();
        return statusText === value;
      },
      render: (status: number) => {
        const statusText = getServiceStatus(status);
        const statusColor = status === 4 ? 'green' : status === 1 ? 'red' : 'orange';
        return (
          <Tag color={statusColor}>
            {statusText}
          </Tag>
        );
      },
    },
    {
      title: 'Kh·ªüi ƒë·ªông',
      dataIndex: 'StartType',
      key: 'StartType',
      width: 100,
      filters: [
        { text: 'T·∫•t c·∫£', value: 'all' },
        { text: 'Automatic', value: 'automatic' },
        { text: 'Manual', value: 'manual' },
        { text: 'Disabled', value: 'disabled' },
        { text: 'Unknown', value: 'unknown' },
      ],
      filteredValue: startTypeFilter === 'all' ? null : [startTypeFilter],
      onFilter: (value: string, record: any) => {
        if (value === 'all') return true;
        const startText = getServiceStartType(record.StartType).toLowerCase();
        return startText === value;
      },
      render: (startType: number) => {
        const startText = getServiceStartType(startType);
        const startColor = startType === 4 ? 'red' : startType === 2 ? 'blue' : 'orange';
        return (
          <Tag color={startColor}>
            {startText}
          </Tag>
        );
      },
    },
    {
      title: 'An to√†n',
      dataIndex: 'SafeToDisable',
      key: 'SafeToDisable',
      width: 80,
      filters: [
        { text: 'T·∫•t c·∫£', value: 'all' },
        { text: 'C√≥', value: 'safe' },
        { text: 'Kh√¥ng', value: 'unsafe' },
      ],
      filteredValue: safeFilter === 'all' ? null : [safeFilter],
      onFilter: (value: string, record: any) => {
        if (value === 'all') return true;
        if (value === 'safe') return record.SafeToDisable === true;
        if (value === 'unsafe') return record.SafeToDisable === false;
        return true;
      },
      render: (safe: boolean) => (
        <Tag color={safe ? 'green' : 'red'}>
          {safe ? 'C√≥' : 'Kh√¥ng'}
        </Tag>
      ),
    },
  ];

  return (
    <div style={customStyles.mainContainer}>
      <Title level={2} style={{ 
        color: gradientStyles.textColor,
        fontWeight: '700',
        textShadow: '0 2px 4px rgba(0,0,0,0.3)'
      }}>T·ªëi ∆∞u h√≥a Windows</Title>

      <Tabs
        defaultActiveKey="1"
        style={{
          '--ant-tabs-color': gradientStyles.textColor,
          '--ant-tabs-color-hover': '#60a5fa',
          '--ant-tabs-color-active': '#3b82f6',
          '--ant-tabs-ink-bar-color': '#3b82f6',
        } as React.CSSProperties}
        items={[
          {
            key: '1',
            label: (
              <span>
                <SettingOutlined style={{ color: '#3b82f6' }} />
                Services
              </span>
            ),
            children: (
              <div>
                <Row gutter={[16, 16]}>
                  <Col span={8}>
                    <Card
                      style={customStyles.card}
                    >
                      <Statistic
                        title={<span style={{ color: gradientStyles.textColorSecondary }}>Services T·ªëi ∆∞u</span>}
                        value={selectedServices.length}
                        suffix={`/ ${Array.isArray(servicesInfo) ? servicesInfo.filter(s => s.SafeToDisable).length : 0}`}
                        valueStyle={{ color: '#3b82f6' }}
                        prefix={<SettingOutlined style={{ color: '#3b82f6' }} />}
                      />
                    </Card>
                  </Col>
                  <Col span={8}>
                    <Card style={customStyles.card}>
                      <Statistic
                        title={<span style={{ color: gradientStyles.textColorSecondary }}>T·ªïng Services</span>}
                        value={Array.isArray(servicesInfo) ? servicesInfo.length : 0}
                        valueStyle={{ color: '#10b981' }}
                        prefix={<AppstoreOutlined style={{ color: '#10b981' }} />}
                      />
                    </Card>
                  </Col>
                  <Col span={8}>
                    <Card style={customStyles.card}>
                      <Statistic
                        title={<span style={{ color: gradientStyles.textColorSecondary }}>ƒêang ch·∫°y</span>}
                        value={Array.isArray(servicesInfo) ? servicesInfo.filter(s => s.Status === 4).length : 0}
                        valueStyle={{ color: '#f59e0b' }}
                        prefix={<SyncOutlined style={{ color: '#f59e0b' }} />}
                      />
                    </Card>
                  </Col>
                </Row>

                <Card 
                  title={<span style={{ color: gradientStyles.textColor }}>Qu·∫£n l√Ω Services</span>}
                  style={{ ...customStyles.card, marginTop: 16 }}
                  extra={
                    <Space>
                      <Button 
                        size="small" 
                        icon={<ReloadOutlined />}
                        onClick={loadServicesOnly}
                        loading={loading}
                        style={customStyles.button}
                      >
                        L√†m m·ªõi Services
                      </Button>
                      <SettingOutlined style={{ color: '#3b82f6' }} />
                    </Space>
                  }
                >
                  <Space direction="vertical" style={{ width: '100%' }}>
                    <Alert
                      message="Th√¥ng tin Services"
                      description={`T·ªïng c·ªông: ${Array.isArray(servicesInfo) ? servicesInfo.length : 0} services | An to√†n ƒë·ªÉ t·∫Øt: ${Array.isArray(servicesInfo) ? servicesInfo.filter(s => s.SafeToDisable).length : 0} | ƒêang ch·∫°y: ${Array.isArray(servicesInfo) ? servicesInfo.filter(s => s.Status === 4).length : 0} | T·ª± ƒë·ªông: ${Array.isArray(servicesInfo) ? servicesInfo.filter(s => s.StartType === 2).length : 0} | ƒê√£ ch·ªçn: ${selectedServices.length}`}
                      type="info"
                      showIcon
                      style={{ marginBottom: 16, background: gradientStyles.backgroundCard, border: `1px solid ${gradientStyles.borderColor}` }}

                    />
                    
                    {/* B·ªô l·ªçc Services */}
                    <Card size="small" style={{ marginBottom: 16, ...customStyles.card }}>
                      <Space wrap>
                        <Text strong style={{ color: gradientStyles.textColor }}>B·ªô l·ªçc:</Text>
                        <Select
                          placeholder="L·ªçc theo tr·∫°ng th√°i"
                          style={{ width: 150 }}
                          value={statusFilter}
                          onChange={handleStatusFilterChange}
                        >
                          <Option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</Option>
                          <Option value="running">ƒêang ch·∫°y</Option>
                          <Option value="stopped">ƒê√£ d·ª´ng</Option>
                          <Option value="unknown">Kh√¥ng x√°c ƒë·ªãnh</Option>
                        </Select>
                        
                        <Select
                          placeholder="L·ªçc theo kh·ªüi ƒë·ªông"
                          style={{ width: 150 }}
                          value={startTypeFilter}
                          onChange={handleStartTypeFilterChange}
                        >
                          <Option value="all">T·∫•t c·∫£ kh·ªüi ƒë·ªông</Option>
                          <Option value="automatic">T·ª± ƒë·ªông</Option>
                          <Option value="manual">Th·ªß c√¥ng</Option>
                          <Option value="disabled">ƒê√£ t·∫Øt</Option>
                          <Option value="unknown">Kh√¥ng x√°c ƒë·ªãnh</Option>
                        </Select>
                        
                        <Select
                          placeholder="L·ªçc theo an to√†n"
                          style={{ width: 150 }}
                          value={safeFilter}
                          onChange={handleSafeFilterChange}
                        >
                          <Option value="all">T·∫•t c·∫£</Option>
                          <Option value="safe">An to√†n ƒë·ªÉ t·∫Øt</Option>
                          <Option value="unsafe">Kh√¥ng an to√†n</Option>
                        </Select>
                        
                        <Button 
                          size="small"
                          onClick={() => {
                            setStatusFilter('all');
                            setStartTypeFilter('all');
                            setSafeFilter('all');
                          }}
                          style={customStyles.button}
                        >
                          X√≥a b·ªô l·ªçc
                        </Button>
                      </Space>
                    </Card>
                    
                    <Space direction="vertical" style={{ width: '100%' }}>
                      <Text style={{ color: gradientStyles.textColor }}>Ch·ªçn services ƒë·ªÉ t·∫Øt (hi·ªÉn th·ªã to√†n b·ªô services t·ª´ h·ªá th·ªëng):</Text>
                      <Space>
                        <Button 
                          size="small"
                          onClick={() => {
                            const safeServices = servicesInfo
                              .filter(s => s.SafeToDisable)
                              .map(s => s.Name);
                            setSelectedServices(safeServices);
                          }}
                          icon={<CheckCircleOutlined />}
                          style={customStyles.button}
                        >
                          Ch·ªçn t·∫•t c·∫£ an to√†n
                        </Button>
                        <Button 
                          size="small"
                          onClick={() => {
                            const runningServices = servicesInfo
                              .filter(s => s.Status === 4 && s.SafeToDisable)
                              .map(s => s.Name);
                            setSelectedServices(runningServices);
                          }}
                          icon={<SyncOutlined />}
                          style={customStyles.button}
                        >
                          Ch·ªçn ƒëang ch·∫°y + an to√†n
                        </Button>
                      </Space>
                    </Space>
                    <Table 
                      columns={serviceColumns} 
                      dataSource={Array.isArray(servicesInfo) ? servicesInfo : []}
                      pagination={{ pageSize: 15 }}
                      size="small"
                      scroll={{ y: 600, x: 800 }}
                      rowKey="Name"
                      style={customStyles.table}
                      rowSelection={{
                        selectedRowKeys: selectedServices,
                        onChange: (selectedRowKeys) => setSelectedServices(selectedRowKeys as string[]),
                      }}
                    />
                    <Space>
                      <Button 
                        type="primary" 
                        onClick={handleOptimizeServices}
                        loading={loading}
                        icon={<SettingOutlined />}
                        disabled={selectedServices.length === 0}
                        style={customStyles.button}
                      >
                        T·∫Øt {selectedServices.length} Services ƒë√£ ch·ªçn
                      </Button>
                      {selectedServices.length > 0 && (
                        <Button 
                          onClick={() => setSelectedServices([])}
                          icon={<CheckCircleOutlined />}
                          style={customStyles.button}
                        >
                          B·ªè ch·ªçn t·∫•t c·∫£
                        </Button>
                      )}
                    </Space>
                  </Space>
                </Card>
              </div>
            ),
          },
          {
            key: '2',
            label: (
              <span>
                <WindowsOutlined style={{ color: '#3b82f6' }} />
                Windows
              </span>
            ),
            children: (
              <div>
                <Row gutter={[16, 16]}>
                  <Col span={12}>
                    <Card
                      title={<span style={{ color: gradientStyles.textColor }}>Windows Defender</span>}
                      style={customStyles.card}
                      extra={
                        <Button 
                          size="small" 
                          icon={<ReloadOutlined />}
                          onClick={loadDefenderOnly}
                          loading={loading}
                          style={customStyles.button}
                        >
                          L√†m m·ªõi
                        </Button>
                      }
                    >
                      <Space direction="vertical" style={{ width: '100%' }}>
                        <Statistic
                          title={<span style={{ color: gradientStyles.textColorSecondary }}>Tr·∫°ng th√°i</span>}
                          value={getDefenderStatus()}
                          valueStyle={{ 
                            color: getDefenderStatus() === 'Disabled' ? '#10b981' : '#ef4444' 
                          }}
                          prefix={<SafetyOutlined style={{ color: '#3b82f6' }} />}
                        />
                        <Text style={{ color: gradientStyles.textColor }}>Ch·ªâ x√≥a antivirus, gi·ªØ UAC Enabled:</Text>
                        <Button 
                          type="primary" 
                          danger
                          onClick={handleDisableDefender}
                          loading={loading}
                          icon={<SafetyOutlined />}
                          block
                          style={customStyles.button}
                        >
                          T·∫Øt Windows Defender
                        </Button>
                        <Text type="secondary" style={{ color: gradientStyles.textColorSecondary }}>
                          ‚ö†Ô∏è S·ª≠ d·ª•ng Windows Defender Remover - ch·ªâ x√≥a antivirus, gi·ªØ UAC
                        </Text>
                      </Space>
                    </Card>
                  </Col>
                  
                  <Col span={12}>
                    <Card
                      title={<span style={{ color: gradientStyles.textColor }}>Windows Update</span>}
                      style={customStyles.card}
                      extra={
                        <Button 
                          size="small" 
                          icon={<ReloadOutlined />}
                          onClick={loadUpdateOnly}
                          loading={loading}
                          style={customStyles.button}
                        >
                          L√†m m·ªõi
                        </Button>
                      }
                    >
                      <Space direction="vertical" style={{ width: '100%' }}>
                        <Statistic
                          title={<span style={{ color: gradientStyles.textColorSecondary }}>Tr·∫°ng th√°i</span>}
                          value={getUpdateStatus()}
                          valueStyle={{ 
                            color: getUpdateStatus() === 'Disabled' ? '#10b981' : '#ef4444' 
                          }}
                          prefix={<SyncOutlined style={{ color: '#3b82f6' }} />}
                        />
                        <Space>
                          <Button 
                            type="primary" 
                            danger
                            onClick={() => {
                              Modal.confirm({
                                title: 'T·∫Øt Windows Update',
                                content: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫Øt Windows Update?',
                                onOk: async () => {
                                  setLoading(true);
                                  try {
                                    const result = await window.electronAPI.disableWindowsUpdate();
                                    message.success(result.message);
                                    await loadUpdateOnly();
                                  } catch (error) {
                                    message.error('L·ªói khi t·∫Øt Windows Update');
                                  } finally {
                                    setLoading(false);
                                  }
                                }
                              });
                            }}
                            loading={loading}
                            icon={<SyncOutlined />}
                            block
                            style={customStyles.button}
                          >
                            T·∫Øt Windows Update
                          </Button>
                          <Button 
                            type="primary"
                            onClick={handleEnableWindowsUpdate}
                            loading={loading}
                            icon={<SyncOutlined />}
                            block
                            style={customStyles.button}
                          >
                            B·∫≠t Windows Update
                          </Button>
                        </Space>
                        <Text type="secondary" style={{ color: gradientStyles.textColorSecondary }}>
                          ‚ö†Ô∏è T·∫Øt Windows Update c√≥ th·ªÉ l√†m gi·∫£m b·∫£o m·∫≠t h·ªá th·ªëng
                        </Text>
                      </Space>
                    </Card>
                  </Col>
                </Row>

                <Row gutter={[16, 16]} style={{ marginTop: 16 }}>
                  <Col span={12}>
                    <Card
                      title={<span style={{ color: gradientStyles.textColor }}>T·ªëi ∆∞u hi·ªáu su·∫•t</span>}
                      style={customStyles.card}
                    >
                      <Space direction="vertical" style={{ width: '100%' }}>
                        <Text style={{ color: gradientStyles.textColorSecondary }}>T·ªëi ∆∞u h·ªá th·ªëng cho hi·ªáu su·∫•t cao nh·∫•t:</Text>
                        <Button 
                          type="primary"
                          onClick={handleOptimizePerformance}
                          loading={loading}
                          icon={<ThunderboltFilled />}
                          block
                          style={customStyles.button}
                        >
                          T·ªëi ∆∞u hi·ªáu su·∫•t
                        </Button>
                        <Text type="secondary" style={{ color: gradientStyles.textColorSecondary }}>
                          ‚Ä¢ T·∫Øt ch·∫ø ƒë·ªô ng·ªß ƒë√¥ng<br/>
                          ‚Ä¢ Chuy·ªÉn High Performance<br/>
                          ‚Ä¢ T·∫Øt hi·ªáu ·ª©ng ƒë·ªï b√≥ng, di chuy·ªÉn<br/>
                        </Text>
                      </Space>
                    </Card>
                  </Col>
                  
                  <Col span={12}>
                    <Card
                      title={<span style={{ color: gradientStyles.textColor }}>G·ª° b·ªè ·ª©ng d·ª•ng m·∫∑c ƒë·ªãnh</span>}
                      style={customStyles.card}
                    >
                      <Space direction="vertical" style={{ width: '100%' }}>
                        <Text style={{ color: gradientStyles.textColorSecondary }}>G·ª° b·ªè c√°c ·ª©ng d·ª•ng m·∫∑c ƒë·ªãnh kh√¥ng c·∫ßn thi·∫øt:</Text>
                        <Button 
                          type="primary"
                          danger
                          onClick={handleRemoveDefaultApps}
                          loading={loading}
                          icon={<DeleteOutlined />}
                          block
                          style={customStyles.button}
                        >
                          G·ª° b·ªè ·ª©ng d·ª•ng m·∫∑c ƒë·ªãnh
                        </Button>
                        <Text type="secondary" style={{ color: gradientStyles.textColorSecondary }}>
                          ‚Ä¢ Cortana, OneDrive<br/>
                          ‚Ä¢ Windows Ink Workspace<br/>
                          ‚Ä¢ Tips, Ads & Suggestions<br/>
                          ‚Ä¢ Background Apps
                        </Text>
                      </Space>
                    </Card>
                  </Col>
                </Row>
              </div>
            ),
          },
          {
            key: '3',
            label: (
              <span>
                <DatabaseOutlined style={{ color: '#3b82f6' }} />
                RAM ·∫£o
              </span>
            ),
            children: (
              <div>
                <Row gutter={[16, 16]}>
                  <Col span={24}>
                    <Card
                      title={<span style={{ color: gradientStyles.textColor }}>Qu·∫£n l√Ω RAM ·∫£o</span>}
                      style={customStyles.card}
                    >
                      <Space direction="vertical" style={{ width: '100%' }}>
                        <Descriptions title={<span style={{ color: gradientStyles.textColor }}>H∆∞·ªõng d·∫´n RAM ·∫£o</span>} column={2} size="small">
                          <Descriptions.Item label={<span style={{ color: gradientStyles.textColorSecondary }}>D∆∞·ªõi 4 GB</span>}>G·∫•p 1.5 ƒë·∫øn 2 l·∫ßn RAM ch√≠nh</Descriptions.Item>
                          <Descriptions.Item label={<span style={{ color: gradientStyles.textColorSecondary }}>4‚Äì8 GB</span>}>B·∫±ng ho·∫∑c g·∫•p 1.5 l·∫ßn RAM ch√≠nh</Descriptions.Item>
                          <Descriptions.Item label={<span style={{ color: gradientStyles.textColorSecondary }}>8‚Äì16 GB</span>}>B·∫±ng RAM ch√≠nh ho·∫∑c nh·ªè h∆°n m·ªôt ch√∫t</Descriptions.Item>
                          <Descriptions.Item label={<span style={{ color: gradientStyles.textColorSecondary }}>Tr√™n 16 GB</span>}>T·ª´ min 1 GB ƒë·∫øn max 4‚Äì8 GB l√† ƒë·ªß</Descriptions.Item>
                        </Descriptions>
                        
                        <Space>
                          <Text style={{ color: gradientStyles.textColor }}>Dung l∆∞·ª£ng RAM ·∫£o (GB):</Text>
                          <InputNumber
                            min={1}
                            max={32}
                            value={virtualMemoryGB}
                            onChange={(value) => setVirtualMemoryGB(value || 8)}
                          />
                        </Space>
                        
                        <Space>
                          <Button 
                            type="primary"
                            onClick={handleSetVirtualMemory}
                            loading={loading}
                            icon={<DatabaseOutlined />}
                            style={customStyles.button}
                          >
                            C√†i ƒë·∫∑t RAM ·∫£o {virtualMemoryGB}GB
                          </Button>
                          <Button 
                            onClick={handleResetVirtualMemory}
                            loading={loading}
                            icon={<DatabaseOutlined />}
                            style={customStyles.button}
                          >
                            Tr·∫£ v·ªÅ m·∫∑c ƒë·ªãnh
                          </Button>
                        </Space>
                        
                        <Alert
                          message="L∆∞u √Ω"
                          description="C·∫ßn restart m√°y t√≠nh ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi RAM ·∫£o ho√†n to√†n."
                          type="info"
                          showIcon
                          style={{ background: gradientStyles.backgroundCard, border: `1px solid ${gradientStyles.borderColor}` }}
                        />
                      </Space>
                    </Card>
                  </Col>
                </Row>
              </div>
            ),
          },
          {
            key: '4',
            label: (
              <span>
                <SettingOutlined style={{ color: '#3b82f6' }} />
                D·ªãch v·ª• c·ª• th·ªÉ
              </span>
            ),
            children: (
              <div>
                <Row gutter={[16, 16]}>
                  <Col span={24}>
                    <Card
                      title={<span style={{ color: gradientStyles.textColor }}>T·∫Øt d·ªãch v·ª• kh√¥ng c·∫ßn thi·∫øt</span>}
                      style={customStyles.card}
                    >
                      <Space direction="vertical" style={{ width: '100%' }}>
                        <Text style={{ color: gradientStyles.textColorSecondary }}>
                          C√°c d·ªãch v·ª• sau s·∫Ω ƒë∆∞·ª£c t·∫Øt ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t:
                        </Text>
                        <Row gutter={[16, 16]}>
                          <Col span={12}>
                            <Alert
                              message="D·ªãch v·ª• h·ªá th·ªëng"
                              description={
                                <ul style={{ fontSize: '12px', margin: '8px 0' }}>
                                  <li>Fax Service</li>
                                  <li>Remote Registry</li>
                                  <li>Windows Insider Service</li>
                                  <li>Windows Search</li>
                                  <li>Connected User Experiences and Telemetry</li>
                                  <li>Diagnostic Policy Service</li>
                                  <li>Superfetch (SysMain)</li>
                                  <li>Touch Keyboard and Handwriting Panel Service</li>
                                  <li>Windows Error Reporting Service</li>
                                </ul>
                              }
                              type="info"
                              showIcon
                              style={{ background: gradientStyles.backgroundCard, border: `1px solid ${gradientStyles.borderColor}` }}
                            />
                          </Col>
                          <Col span={12}>
                            <Alert
                              message="D·ªãch v·ª• Xbox"
                              description={
                                <ul style={{ fontSize: '12px', margin: '8px 0' }}>
                                  <li>Xbox Live Auth Manager</li>
                                  <li>Xbox Game Monitoring</li>
                                  <li>Xbox Live Networking Service</li>
                                  <li>Xbox Accessory Management Service</li>
                                </ul>
                              }
                              type="warning"
                              showIcon
                              style={{ background: gradientStyles.backgroundCard, border: `1px solid ${gradientStyles.borderColor}` }}
                            />
                          </Col>
                        </Row>
                        <Button 
                          type="primary"
                          danger
                          onClick={handleDisableSpecificServices}
                          loading={loading}
                          icon={<SettingOutlined />}
                          block
                          style={customStyles.button}
                        >
                          T·∫Øt c√°c d·ªãch v·ª• ƒë√£ ch·ªçn
                        </Button>
                        <Text type="secondary" style={{ color: gradientStyles.textColorSecondary }}>
                          ‚ö†Ô∏è C√°c d·ªãch v·ª• n√†y c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn m·ªôt s·ªë t√≠nh nƒÉng Windows. H√£y c·∫©n th·∫≠n khi t·∫Øt.
                        </Text>
                      </Space>
                    </Card>
                  </Col>
                </Row>
              </div>
            ),
          },
          {
            key: '5',
            label: (
              <span>
                <DatabaseOutlined style={{ color: '#3b82f6' }} />
                T·ªëi ∆∞u m·∫°ng
              </span>
            ),
            children: (
              <div>
                <Row gutter={[16, 16]}>
                  <Col span={24}>
                    <Card
                      title={<span style={{ color: gradientStyles.textColor }}>T·ªëi ∆∞u c√†i ƒë·∫∑t m·∫°ng</span>}
                      style={customStyles.card}
                    >
                      <Space direction="vertical" style={{ width: '100%' }}>
                        <Alert
                          message="Th√¥ng tin t·ªëi ∆∞u m·∫°ng"
                          description="C√°c t√πy ch·ªçn t·ªëi ∆∞u m·∫°ng s·∫Ω c·∫£i thi·ªán hi·ªáu su·∫•t k·∫øt n·ªëi v√† gi·∫£m ƒë·ªô tr·ªÖ"
                          type="info"
                          showIcon
                          style={{ marginBottom: 16, background: gradientStyles.backgroundCard, border: `1px solid ${gradientStyles.borderColor}` }}
                        />
                        
                        <Row gutter={[16, 16]}>
                          <Col span={12}>
                            <Card size="small" style={{ ...customStyles.card, border: '1px solid #52c41a' }}>
                              <Space direction="vertical" style={{ width: '100%' }}>
                                <Text strong style={{ color: '#52c41a' }}>TCP/IP T·ªëi ∆∞u</Text>
                                <Text style={{ color: gradientStyles.textColorSecondary, fontSize: '12px' }}>
                                  ‚Ä¢ Auto-tuning: Normal<br/>
                                  ‚Ä¢ RSS (Receive Side Scaling): Enabled<br/>
                                  ‚Ä¢ RSC (Receive Segment Coalescing): Enabled<br/>
                                  ‚Ä¢ ECN (Explicit Congestion Notification): Enabled
                                </Text>
                                <Button 
                                  type="primary"
                                  size="small"
                                  onClick={async () => {
                                    setLoading(true);
                                    try {
                                      const result = await window.electronAPI.applyOptimization('system_network_optimization', true);
                                      message.success(result.message);
                                    } catch (error) {
                                      message.error('L·ªói khi t·ªëi ∆∞u m·∫°ng');
                                    } finally {
                                      setLoading(false);
                                    }
                                  }}
                                  loading={loading}
                                  icon={<DatabaseOutlined />}
                                  style={{ ...customStyles.button, background: '#52c41a', borderColor: '#52c41a' }}
                                >
                                  B·∫≠t t·ªëi ∆∞u TCP/IP
                                </Button>
                              </Space>
                            </Card>
                          </Col>
                          
                          <Col span={12}>
                            <Card size="small" style={{ ...customStyles.card, border: '1px solid #faad14' }}>
                              <Space direction="vertical" style={{ width: '100%' }}>
                                <Text strong style={{ color: '#faad14' }}>Gi·∫£m ti√™u th·ª• m·∫°ng</Text>
                                <Text style={{ color: gradientStyles.textColorSecondary, fontSize: '12px' }}>
                                  ‚Ä¢ T·∫Øt Widgets v√† News feeds<br/>
                                  ‚Ä¢ T·∫Øt ·ª©ng d·ª•ng ch·∫°y n·ªÅn<br/>
                                  ‚Ä¢ Gi·∫£m Telemetry v√† Feedback<br/>
                                  ‚Ä¢ T·∫Øt RSS tasks
                                </Text>
                                <Button 
                                  type="default"
                                  size="small"
                                  onClick={async () => {
                                    setLoading(true);
                                    try {
                                      // √Åp d·ª•ng t·∫•t c·∫£ t·ªëi ∆∞u m·∫°ng
                                      const networkOptions = [
                                        'network_disable_widgets',
                                        'network_disable_news',
                                        'network_disable_weather',
                                        'network_disable_background_apps',
                                        'network_disable_telemetry',
                                        'network_disable_feedback',
                                        'network_disable_diagtrack',
                                        'network_disable_dmwappushservice',
                                        'network_disable_rss_tasks'
                                      ];
                                      
                                      for (const option of networkOptions) {
                                        await window.electronAPI.applyOptimization(option, true);
                                      }
                                      message.success('ƒê√£ √°p d·ª•ng t·∫•t c·∫£ t·ªëi ∆∞u m·∫°ng');
                                    } catch (error) {
                                      message.error('L·ªói khi √°p d·ª•ng t·ªëi ∆∞u m·∫°ng');
                                    } finally {
                                      setLoading(false);
                                    }
                                  }}
                                  loading={loading}
                                  icon={<DatabaseOutlined />}
                                  style={{ ...customStyles.button, borderColor: '#faad14', color: '#faad14' }}
                                >
                                  Gi·∫£m ti√™u th·ª• m·∫°ng
                                </Button>
                              </Space>
                            </Card>
                          </Col>
                        </Row>
                        
                        <Divider />
                        
                        <Row gutter={[16, 16]}>
                          <Col span={24}>
                            <Card size="small" style={{ ...customStyles.card, border: '1px solid #1890ff' }}>
                              <Space direction="vertical" style={{ width: '100%' }}>
                                <Text strong style={{ color: '#1890ff' }}>T·ªëi ∆∞u Game Networking</Text>
                                <Text style={{ color: gradientStyles.textColorSecondary, fontSize: '12px' }}>
                                  ‚Ä¢ T·∫Øt Network Throttling cho gaming<br/>
                                  ‚Ä¢ T·ªëi ∆∞u System Responsiveness<br/>
                                  ‚Ä¢ Gi·∫£m ƒë·ªô tr·ªÖ m·∫°ng cho game
                                </Text>
                                <Button 
                                  type="primary"
                                  size="small"
                                  onClick={async () => {
                                    setLoading(true);
                                    try {
                                      const result = await window.electronAPI.applyAdvancedRAMOptimization();
                                      message.success(result.message);
                                    } catch (error) {
                                      message.error('L·ªói khi t·ªëi ∆∞u game networking');
                                    } finally {
                                      setLoading(false);
                                    }
                                  }}
                                  loading={loading}
                                  icon={<ThunderboltFilled />}
                                  style={customStyles.button}
                                >
                                  T·ªëi ∆∞u Game Networking
                                </Button>
                              </Space>
                            </Card>
                          </Col>
                        </Row>
                        
                        <Alert
                          message="L∆∞u √Ω"
                          description="C√°c t·ªëi ∆∞u m·∫°ng s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng ngay l·∫≠p t·ª©c. M·ªôt s·ªë thay ƒë·ªïi c√≥ th·ªÉ c·∫ßn restart ƒë·ªÉ c√≥ hi·ªáu l·ª±c ho√†n to√†n."
                          type="info"
                          showIcon
                          style={{ marginTop: 16, background: gradientStyles.backgroundCard, border: `1px solid ${gradientStyles.borderColor}` }}
                        />
                      </Space>
                    </Card>
                  </Col>
                </Row>
              </div>
            ),
          },
        ]}
      />

      <Alert
        message="C·∫£nh b√°o"
        description="C√°c thao t√°c n√†y c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn b·∫£o m·∫≠t v√† hi·ªáu su·∫•t h·ªá th·ªëng. H√£y c·∫©n th·∫≠n khi s·ª≠ d·ª•ng."
        type="warning"
        showIcon
        style={{ marginTop: 16, background: gradientStyles.backgroundCard, border: `1px solid ${gradientStyles.borderColor}` }}
      />
    </div>
  );
};

export default WindowsOptimization; 