import React, { useState, useEffect } from 'react';
import { Card, Row, Col, Button, Typography, Space, Table, Modal, message, Progress, Alert, Tag, Descriptions, Divider, Tabs, Statistic, List, Tooltip, Checkbox, Badge } from 'antd';
import { DeleteOutlined, ReloadOutlined, CheckCircleOutlined, ExclamationCircleOutlined, InfoCircleOutlined, ClockCircleOutlined, DatabaseOutlined, HddOutlined, ThunderboltOutlined, FileOutlined, SettingOutlined, ClearOutlined, DeleteOutlined as TrashOutlined, ClearOutlined as CleanOutlined, SafetyOutlined, WarningOutlined } from '@ant-design/icons';
import { gradientStyles, customStyles, tableStyles, modalStyles } from '../styles/theme';

const { Title, Text } = Typography;


interface CleanupItem {
  name: string;
  size: string;
  description: string;
  selected: boolean;
  category: string;
  risk: 'low' | 'medium' | 'high';
  priority: 'high' | 'medium' | 'low';
  details?: {
    folders: string[];
    fileCount: number;
    largestFiles: Array<{name: string, size: number}>;
    lastModified: Date;
    estimatedFreed: number;
    safetyLevel: string;
  };
}

interface CleanupResult {
  itemName: string;
  sizeFreed: string;
  status: 'success' | 'failed' | 'partial';
  message: string;
  itemsRemoved: number;
}

const CleanupManager: React.FC = () => {
  const [cleanupItems, setCleanupItems] = useState<CleanupItem[]>([
    // Cache v√† file t·∫°m - ∆Øu ti√™n cao
    { name: 'Temporary Files', size: '0 MB', description: 'Files t·∫°m th·ªùi c·ªßa h·ªá th·ªëng (%TEMP%, %TMP%)', selected: true, category: 'cache', risk: 'low', priority: 'high' },
    { name: 'Windows Update Cache', size: '0 MB', description: 'Cache c·∫≠p nh·∫≠t Windows (SoftwareDistribution)', selected: true, category: 'cache', risk: 'low', priority: 'high' },
    { name: 'Browser Cache', size: '0 MB', description: 'Cache tr√¨nh duy·ªát (Chrome, Edge, Firefox, Opera)', selected: true, category: 'cache', risk: 'low', priority: 'high' },
    { name: 'System Cache', size: '0 MB', description: 'Cache h·ªá th·ªëng Windows (Prefetch, Font Cache)', selected: true, category: 'cache', risk: 'low', priority: 'high' },
    { name: 'Application Cache', size: '0 MB', description: 'Cache ·ª©ng d·ª•ng (AppData/Local/Temp)', selected: true, category: 'cache', risk: 'low', priority: 'high' },
    
    // File r√°c v√† th√πng r√°c - ∆Øu ti√™n trung b√¨nh
    { name: 'Recycle Bin', size: '0 MB', description: 'Th√πng r√°c h·ªá th·ªëng', selected: true, category: 'trash', risk: 'low', priority: 'medium' },
    { name: 'Old Files', size: '0 MB', description: 'Files c≈© (>30 ng√†y) trong Downloads, Desktop', selected: false, category: 'trash', risk: 'medium', priority: 'medium' },
    { name: 'Duplicate Files', size: '0 MB', description: 'Files tr√πng l·∫∑p trong th∆∞ m·ª•c ng∆∞·ªùi d√πng', selected: false, category: 'trash', risk: 'medium', priority: 'low' },
    
    // Log v√† file h·ªá th·ªëng - ∆Øu ti√™n trung b√¨nh
    { name: 'System Logs', size: '0 MB', description: 'Log h·ªá th·ªëng c≈© (Event Logs, Error Reports)', selected: true, category: 'system', risk: 'low', priority: 'medium' },
    { name: 'Windows Error Reports', size: '0 MB', description: 'B√°o c√°o l·ªói Windows c≈©', selected: true, category: 'system', risk: 'low', priority: 'medium' },
    { name: 'Memory Dumps', size: '0 MB', description: 'Memory dump files c≈©', selected: false, category: 'system', risk: 'medium', priority: 'low' },
    
    // ·ª®ng d·ª•ng v√† d·ªØ li·ªáu kh√¥ng c·∫ßn thi·∫øt - ∆Øu ti√™n th·∫•p
    { name: 'Unused Apps', size: '0 MB', description: '·ª®ng d·ª•ng kh√¥ng s·ª≠ d·ª•ng', selected: false, category: 'apps', risk: 'medium', priority: 'low' },
    { name: 'Old Downloads', size: '0 MB', description: 'Files t·∫£i v·ªÅ c≈© (>90 ng√†y)', selected: false, category: 'trash', risk: 'medium', priority: 'low' },
    { name: 'Empty Folders', size: '0 MB', description: 'Th∆∞ m·ª•c tr·ªëng trong h·ªá th·ªëng', selected: false, category: 'system', risk: 'low', priority: 'low' },
    
    // Cache n√¢ng cao - ∆Øu ti√™n cao
    { name: 'DNS Cache', size: '0 MB', description: 'Cache DNS h·ªá th·ªëng', selected: true, category: 'network', risk: 'low', priority: 'high' },
    { name: 'Network Cache', size: '0 MB', description: 'Cache m·∫°ng v√† k·∫øt n·ªëi', selected: true, category: 'network', risk: 'low', priority: 'high' },
    { name: 'Print Spooler Cache', size: '0 MB', description: 'Cache m√°y in v√† spooler', selected: true, category: 'system', risk: 'low', priority: 'medium' },
  ]);
  const [isCleaning, setIsCleaning] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [cleanupProgress, setCleanupProgress] = useState(0);
  const [cleanupResults, setCleanupResults] = useState<CleanupResult[]>([]);
  const [totalFreed, setTotalFreed] = useState(0);
  const [categoryFilter, setCategoryFilter] = useState<string>('all');
  const [priorityFilter, setPriorityFilter] = useState<string>('all');
  const [detailModalVisible, setDetailModalVisible] = useState(false);
  const [selectedItem, setSelectedItem] = useState<CleanupItem | null>(null);
  const [analysisStats, setAnalysisStats] = useState({
    totalSize: 0,
    totalFiles: 0,
    totalFolders: 0,
    lastAnalysis: null as Date | null
  });

  const handleAnalyzeSystem = async () => {
    try {
      setIsAnalyzing(true);
      setCleanupProgress(0);
      
      console.log('üîç B·∫Øt ƒë·∫ßu ph√¢n t√≠ch h·ªá th·ªëng...');
      
      // G·ªçi API ƒë·ªÉ ph√¢n t√≠ch h·ªá th·ªëng th·ª±c t·∫ø
      const systemAnalysis = await window.electronAPI.analyzeSystemForCleanup();
      console.log('üìä System analysis result:', systemAnalysis);
      
      // Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      if (!systemAnalysis || !Array.isArray(systemAnalysis)) {
        console.error('‚ùå Invalid analysis data:', systemAnalysis);
        message.error('D·ªØ li·ªáu ph√¢n t√≠ch kh√¥ng h·ª£p l·ªá');
        return;
      }
      
      if (systemAnalysis.length === 0) {
        console.warn('‚ö†Ô∏è No analysis data returned');
        message.warning('Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n t√≠ch');
        return;
      }
      
      console.log(`üìã Found ${systemAnalysis.length} analysis items`);
      
      // C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc v√† chi ti·∫øt d·ª±a tr√™n d·ªØ li·ªáu th·ª±c
      const updatedItems = cleanupItems.map(item => {
        // T√¨m analysis item ch√≠nh x√°c d·ª±a tr√™n t√™n
        const analysisItem = systemAnalysis.find((analysis: any) => 
          analysis.name === item.name
        );
        
        if (analysisItem) {
          console.log(`‚úÖ Found analysis for ${item.name}: ${analysisItem.size} MB`);
          
          // ƒê·∫£m b·∫£o size l√† s·ªë h·ª£p l·ªá
          const sizeInMB = typeof analysisItem.size === 'number' ? analysisItem.size : 0;
          
          // T√≠nh to√°n ∆∞·ªõc t√≠nh dung l∆∞·ª£ng c√≥ th·ªÉ gi·∫£i ph√≥ng
          const estimatedFreed = Math.round(sizeInMB * 0.85); // ∆Ø·ªõc t√≠nh 85% c√≥ th·ªÉ ƒë∆∞·ª£c gi·∫£i ph√≥ng
          
          return {
            ...item,
            size: `${sizeInMB} MB`,
            details: {
              folders: analysisItem.details?.folders || [],
              fileCount: analysisItem.details?.fileCount || 0,
              largestFiles: analysisItem.details?.largestFiles || [],
              lastModified: analysisItem.details?.lastModified ? new Date(analysisItem.details.lastModified) : new Date(),
              estimatedFreed,
              safetyLevel: item.risk === 'low' ? 'An to√†n' : item.risk === 'medium' ? 'C·∫ßn th·∫≠n tr·ªçng' : 'R·ªßi ro cao'
            }
          };
        } else {
          console.log(`‚ùå No analysis found for ${item.name}`);
          return item;
        }
      });
      
      setCleanupItems(updatedItems);
      
      // C·∫≠p nh·∫≠t th·ªëng k√™ ph√¢n t√≠ch
      const totalSize = updatedItems.reduce((sum, item) => {
        const sizeStr = item.size.replace(' MB', '').replace(',', '');
        const size = parseInt(sizeStr) || 0;
        return sum + size;
      }, 0);
      
      const totalFiles = updatedItems.reduce((sum, item) => {
        return sum + (item.details?.fileCount || 0);
      }, 0);
      
      const totalFolders = updatedItems.reduce((sum, item) => {
        return sum + (item.details?.folders?.length || 0);
      }, 0);
      
      console.log(`üìä Analysis stats: ${totalSize} MB, ${totalFiles} files, ${totalFolders} folders`);
      
      setAnalysisStats({
        totalSize,
        totalFiles,
        totalFolders,
        lastAnalysis: new Date()
      });
      
      setCleanupProgress(100);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o chi ti·∫øt
      const itemsWithData = updatedItems.filter(item => {
        const size = parseInt(item.size.replace(' MB', '').replace(',', '')) || 0;
        return size > 0;
      });
      
      message.success({
        content: (
          <div>
            <div><strong>Ph√¢n t√≠ch ho√†n t·∫•t!</strong></div>
            <div>üìä T·ªïng dung l∆∞·ª£ng: <strong>{totalSize.toLocaleString()} MB</strong></div>
            <div>üìÅ T·ªïng files: <strong>{totalFiles.toLocaleString()}</strong></div>
            <div>‚úÖ T√¨m th·∫•y d·ªØ li·ªáu: <strong>{itemsWithData.length}/{updatedItems.length} m·ª•c</strong></div>
          </div>
        ),
        duration: 4
      });
    } catch (error) {
      console.error('L·ªói ph√¢n t√≠ch h·ªá th·ªëng:', error);
      message.error('Ph√¢n t√≠ch h·ªá th·ªëng th·∫•t b·∫°i');
      
      // Fallback: s·ª≠ d·ª•ng d·ªØ li·ªáu ∆∞·ªõc t√≠nh c·ªë ƒë·ªãnh
      const estimatedSizes = {
        'Temporary Files': '150-300 MB',
        'Windows Update Cache': '500-2000 MB',
        'Browser Cache': '200-800 MB',
        'System Cache': '100-500 MB',
        'Application Cache': '50-200 MB',
        'Recycle Bin': '0-1000 MB',
        'Old Files': '0-5000 MB',
        'Duplicate Files': '0-2000 MB',
        'System Logs': '50-200 MB',
        'Windows Error Reports': '20-100 MB',
        'Memory Dumps': '0-500 MB',
        'Unused Apps': '0-1000 MB',
        'Old Downloads': '0-3000 MB',
        'Empty Folders': '0-100 MB',
        'DNS Cache': '1-10 MB',
        'Network Cache': '10-50 MB',
        'Print Spooler Cache': '5-50 MB',
      };
      
      const fallbackItems = cleanupItems.map(item => ({
        ...item,
        size: estimatedSizes[item.name as keyof typeof estimatedSizes] || '0 MB'
      }));
      setCleanupItems(fallbackItems);
    } finally {
      setIsAnalyzing(false);
      setCleanupProgress(0);
    }
  };

  const handleCleanupSystem = async () => {
    const selectedItems = cleanupItems.filter(item => item.selected);
    if (selectedItems.length === 0) {
      message.warning('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m·ª•c ƒë·ªÉ d·ªçn d·∫πp');
      return;
    }

    // S·∫Øp x·∫øp theo ∆∞u ti√™n: high -> medium -> low
    const sortedItems = selectedItems.sort((a, b) => {
      const priorityOrder = { high: 3, medium: 2, low: 1 };
      return priorityOrder[b.priority] - priorityOrder[a.priority];
    });

    Modal.confirm({
      title: 'X√°c nh·∫≠n d·ªçn d·∫πp to√†n di·ªán',
      content: (
        <div>
          <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën d·ªçn d·∫πp {selectedItems.length} m·ª•c ƒë√£ ch·ªçn?</p>
          <div style={{ marginTop: 16 }}>
            <Text strong style={{ color: gradientStyles.textColor }}>Th·ª© t·ª± ∆∞u ti√™n:</Text>
            <ul style={{ fontSize: '12px', color: '#666', marginTop: 8 }}>
              {sortedItems.map((item, index) => (
                <li key={item.name}>
                  {index + 1}. {item.name} - {item.description} ({item.size})
                  <Tag color={item.priority === 'high' ? 'red' : item.priority === 'medium' ? 'orange' : 'blue'} style={{ marginLeft: 8 }}>
                    {item.priority === 'high' ? 'Cao' : item.priority === 'medium' ? 'Trung b√¨nh' : 'Th·∫•p'}
                  </Tag>
                </li>
              ))}
            </ul>
          </div>
          <p style={{ color: '#faad14', fontSize: '12px', marginTop: 16 }}>
            ‚ö†Ô∏è Qu√° tr√¨nh n√†y s·∫Ω x√≥a vƒ©nh vi·ªÖn c√°c file ƒë∆∞·ª£c ch·ªçn. H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ backup d·ªØ li·ªáu quan tr·ªçng.
          </p>
        </div>
      ),
      onOk: async () => {
        try {
          setIsCleaning(true);
          setCleanupProgress(0);
          setCleanupResults([]);
          setTotalFreed(0);

          const results: CleanupResult[] = [];
          let totalFreedSize = 0;

          for (let i = 0; i < sortedItems.length; i++) {
            const item = sortedItems[i];
            setCleanupProgress(((i + 1) / sortedItems.length) * 100);

            try {
              // Ki·ªÉm tra an to√†n tr∆∞·ªõc khi cleanup
              try {
                const safetyCheck = await window.electronAPI.performSafetyCheck();
                if (safetyCheck && !safetyCheck.safe) {
                  console.warn('Safety check failed:', safetyCheck.warnings);
                }
              } catch (error) {
                console.log('Safety check not available:', error);
              }

              // Call the optimized cleanup service (fallback to regular cleanup)
              const result = await window.electronAPI.optimizedCleanup({
                tempFiles: item.name === 'Temporary Files',
                recycleBin: item.name === 'Recycle Bin',
                windowsUpdate: item.name === 'Windows Update Cache',
                browserCache: item.name === 'Browser Cache',
                systemLogs: item.name === 'System Logs',
                oldFiles: item.name === 'Old Files',
                unusedApps: item.name === 'Unused Apps',
                systemCache: item.name === 'System Cache',
                applicationCache: item.name === 'Application Cache',
                dnsCache: item.name === 'DNS Cache',
                networkCache: item.name === 'Network Cache',
                printSpoolerCache: item.name === 'Print Spooler Cache',
                errorReports: item.name === 'Windows Error Reports',
                memoryDumps: item.name === 'Memory Dumps',
                duplicateFiles: item.name === 'Duplicate Files',
                oldDownloads: item.name === 'Old Downloads',
                emptyFolders: item.name === 'Empty Folders',
              }) || await window.electronAPI.cleanupSystem({
                tempFiles: item.name === 'Temporary Files',
                recycleBin: item.name === 'Recycle Bin',
                windowsUpdate: item.name === 'Windows Update Cache',
                browserCache: item.name === 'Browser Cache',
                systemLogs: item.name === 'System Logs',
                oldFiles: item.name === 'Old Files',
                unusedApps: item.name === 'Unused Apps',
                systemCache: item.name === 'System Cache',
                applicationCache: item.name === 'Application Cache',
                dnsCache: item.name === 'DNS Cache',
                networkCache: item.name === 'Network Cache',
                printSpoolerCache: item.name === 'Print Spooler Cache',
                errorReports: item.name === 'Windows Error Reports',
                memoryDumps: item.name === 'Memory Dumps',
                duplicateFiles: item.name === 'Duplicate Files',
                oldDownloads: item.name === 'Old Downloads',
                emptyFolders: item.name === 'Empty Folders',
              });

              // L·∫•y dung l∆∞·ª£ng th·ª±c t·ª´ k·∫øt qu·∫£ cleanup
              let freedSize = 0;
              let status: 'success' | 'failed' | 'partial' = 'success';
              let message = 'Th√†nh c√¥ng';
              let itemsRemoved = 0;

              if (result && Array.isArray(result)) {
                const itemResult = result.find(r => r.success);
                if (itemResult) {
                  freedSize = Math.round(itemResult.freedSpace / (1024 * 1024)); // Convert bytes to MB
                  itemsRemoved = itemResult.itemsRemoved || 0;
                  message = itemResult.message || 'Th√†nh c√¥ng';
                } else {
                  status = 'failed';
                  message = 'Th·∫•t b·∫°i';
                }
              }

              // Fallback: l·∫•y dung l∆∞·ª£ng t·ª´ size hi·ªán t·∫°i c·ªßa item
              if (freedSize === 0 && status !== 'failed') {
                const currentSize = parseInt(item.size.replace(' MB', '')) || 0;
                freedSize = Math.round(currentSize * 0.8); // ∆Ø·ªõc t√≠nh 80% dung l∆∞·ª£ng c√≥ th·ªÉ ƒë∆∞·ª£c gi·∫£i ph√≥ng
                message = '∆Ø·ªõc t√≠nh th√†nh c√¥ng';
              }

              totalFreedSize += freedSize;
              
              results.push({
                itemName: item.name,
                sizeFreed: `${freedSize} MB`,
                status,
                message,
                itemsRemoved
              });

              await new Promise(resolve => setTimeout(resolve, 500)); // TƒÉng delay ƒë·ªÉ hi·ªÉn th·ªã progress
            } catch (error) {
              console.error(`Error cleaning up ${item.name}:`, error);
              results.push({
                itemName: item.name,
                sizeFreed: '0 MB',
                status: 'failed',
                message: 'L·ªói h·ªá th·ªëng',
                itemsRemoved: 0
              });
            }
          }

          setCleanupResults(results);
          setTotalFreed(totalFreedSize);
          
          const successCount = results.filter(r => r.status === 'success').length;
          const failedCount = results.filter(r => r.status === 'failed').length;
          
          // Hi·ªÉn th·ªã th√¥ng b√°o chi ti·∫øt
          const totalItems = results.reduce((sum, r) => sum + r.itemsRemoved, 0);
          
          if (failedCount === 0) {
            message.success({
              content: (
                <div>
                  <div><strong>D·ªçn d·∫πp ho√†n t·∫•t!</strong></div>
                  <div>üìä ƒê√£ gi·∫£i ph√≥ng: <strong>{totalFreedSize} MB</strong></div>
                  <div>üóÇÔ∏è ƒê√£ x√≥a: <strong>{totalItems.toLocaleString()} files</strong></div>
                  <div>‚úÖ Th√†nh c√¥ng: <strong>{successCount}/{results.length} m·ª•c</strong></div>
                </div>
              ),
              duration: 5
            });
          } else if (successCount > 0) {
            message.warning({
              content: (
                <div>
                  <div><strong>D·ªçn d·∫πp m·ªôt ph·∫ßn ho√†n t·∫•t!</strong></div>
                  <div>üìä ƒê√£ gi·∫£i ph√≥ng: <strong>{totalFreedSize} MB</strong></div>
                  <div>üóÇÔ∏è ƒê√£ x√≥a: <strong>{totalItems.toLocaleString()} files</strong></div>
                  <div>‚úÖ Th√†nh c√¥ng: <strong>{successCount}/{results.length} m·ª•c</strong></div>
                  <div>‚ùå Th·∫•t b·∫°i: <strong>{failedCount} m·ª•c</strong></div>
                </div>
              ),
              duration: 6
            });
          } else {
            message.error({
              content: (
                <div>
                  <div><strong>D·ªçn d·∫πp th·∫•t b·∫°i ho√†n to√†n</strong></div>
                  <div>‚ùå T·∫•t c·∫£ {results.length} m·ª•c ƒë·ªÅu th·∫•t b·∫°i</div>
                  <div>üí° H√£y th·ª≠ ch·∫°y v·ªõi quy·ªÅn Administrator</div>
                </div>
              ),
              duration: 6
            });
          }
          
          // T·ª± ƒë·ªông ph√¢n t√≠ch l·∫°i h·ªá th·ªëng sau khi cleanup
          setTimeout(() => {
            handleAnalyzeSystem();
          }, 2000);
        } catch (error) {
          console.error('Cleanup error:', error);
          message.error('D·ªçn d·∫πp th·∫•t b·∫°i');
        } finally {
          setIsCleaning(false);
          setCleanupProgress(0);
        }
      },
    });
  };

  const handleItemSelection = (itemName: string, checked: boolean) => {
    setCleanupItems(items =>
      items.map(item =>
        item.name === itemName ? { ...item, selected: checked } : item
      )
    );
  };

  const handleShowDetails = (item: CleanupItem) => {
    setSelectedItem(item);
    setDetailModalVisible(true);
  };

  const handleSelectAll = (checked: boolean) => {
    setCleanupItems(items =>
      items.map(item => ({ ...item, selected: checked }))
    );
  };

  const handleSelectByCategory = (category: string, checked: boolean) => {
    setCleanupItems(items =>
      items.map(item =>
        item.category === category ? { ...item, selected: checked } : item
      )
    );
  };

  const handleSelectByPriority = (priority: string, checked: boolean) => {
    setCleanupItems(items =>
      items.map(item =>
        item.priority === priority ? { ...item, selected: checked } : item
      )
    );
  };

  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'low': return 'green';
      case 'medium': return 'orange';
      case 'high': return 'red';
      default: return 'blue';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'red';
      case 'medium': return 'orange';
      case 'low': return 'blue';
      default: return 'blue';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'cache': return <ClearOutlined />;
      case 'trash': return <TrashOutlined />;
      case 'system': return <SettingOutlined />;
      case 'apps': return <FileOutlined />;
      case 'network': return <DatabaseOutlined />;
      default: return <FileOutlined />;
    }
  };

  const filteredItems = cleanupItems.filter(item => {
    const categoryMatch = categoryFilter === 'all' || item.category === categoryFilter;
    const priorityMatch = priorityFilter === 'all' || item.priority === priorityFilter;
    return categoryMatch && priorityMatch;
  });

  return (
    <div style={customStyles.mainContainer}>
      <Title level={2} style={{ 
        color: gradientStyles.textColor,
        fontWeight: '700',
        textShadow: '0 2px 4px rgba(0,0,0,0.3)'
      }}>D·ªçn d·∫πp h·ªá th·ªëng to√†n di·ªán</Title>

      {(isCleaning || isAnalyzing) && (
        <Card style={{ marginBottom: 16, ...customStyles.card }}>
          <Space direction="vertical" style={{ width: '100%' }}>
            <Text strong style={{ color: gradientStyles.textColor }}>
              {isAnalyzing ? 'ƒêang ph√¢n t√≠ch h·ªá th·ªëng...' : 'ƒêang d·ªçn d·∫πp...'}
            </Text>
            <Progress percent={cleanupProgress} status="active" />
          </Space>
        </Card>
      )}

      <Row gutter={[16, 16]}>
        <Col span={16}>
          <Card 
            title={<span style={{ color: gradientStyles.textColor }}>C√°c m·ª•c d·ªçn d·∫πp</span>}
            style={customStyles.card}
            extra={
              <Space>
                <Button 
                  size="small" 
                  onClick={() => handleSelectAll(true)}
                  style={customStyles.button}
                >
                  Ch·ªçn t·∫•t c·∫£
                </Button>
                <Button 
                  size="small" 
                  onClick={() => handleSelectAll(false)}
                  style={customStyles.button}
                >
                  B·ªè ch·ªçn t·∫•t c·∫£
                </Button>
              </Space>
            }
          >
            {/* Filter Controls */}
            <Card size="small" style={{ marginBottom: 16, ...customStyles.card }}>
              <Space direction="vertical" style={{ width: '100%' }}>
                <Space wrap>
                  <Text strong style={{ color: gradientStyles.textColor }}>L·ªçc theo danh m·ª•c:</Text>
                  <Button 
                    size="small"
                    type={categoryFilter === 'all' ? 'primary' : 'default'}
                    onClick={() => setCategoryFilter('all')}
                    style={customStyles.button}
                  >
                    T·∫•t c·∫£
                  </Button>
                  <Button 
                    size="small"
                    type={categoryFilter === 'cache' ? 'primary' : 'default'}
                    onClick={() => setCategoryFilter('cache')}
                    icon={<ClearOutlined />}
                    style={customStyles.button}
                  >
                    Cache
                  </Button>
                  <Button 
                    size="small"
                    type={categoryFilter === 'trash' ? 'primary' : 'default'}
                    onClick={() => setCategoryFilter('trash')}
                    icon={<TrashOutlined />}
                    style={customStyles.button}
                  >
                    File r√°c
                  </Button>
                  <Button 
                    size="small"
                    type={categoryFilter === 'system' ? 'primary' : 'default'}
                    onClick={() => setCategoryFilter('system')}
                    icon={<SettingOutlined />}
                    style={customStyles.button}
                  >
                    H·ªá th·ªëng
                  </Button>
                  <Button 
                    size="small"
                    type={categoryFilter === 'apps' ? 'primary' : 'default'}
                    onClick={() => setCategoryFilter('apps')}
                    icon={<FileOutlined />}
                    style={customStyles.button}
                  >
                    ·ª®ng d·ª•ng
                  </Button>
                  <Button 
                    size="small"
                    type={categoryFilter === 'network' ? 'primary' : 'default'}
                    onClick={() => setCategoryFilter('network')}
                    icon={<DatabaseOutlined />}
                    style={customStyles.button}
                  >
                    M·∫°ng
                  </Button>
                </Space>
                
                <Space wrap>
                  <Text strong style={{ color: gradientStyles.textColor }}>L·ªçc theo ∆∞u ti√™n:</Text>
                  <Button 
                    size="small"
                    type={priorityFilter === 'all' ? 'primary' : 'default'}
                    onClick={() => setPriorityFilter('all')}
                    style={customStyles.button}
                  >
                    T·∫•t c·∫£
                  </Button>
                  <Button 
                    size="small"
                    type={priorityFilter === 'high' ? 'primary' : 'default'}
                    onClick={() => setPriorityFilter('high')}
                    style={{ ...customStyles.button, color: '#ff4d4f' }}
                  >
                    <SafetyOutlined /> Cao
                  </Button>
                  <Button 
                    size="small"
                    type={priorityFilter === 'medium' ? 'primary' : 'default'}
                    onClick={() => setPriorityFilter('medium')}
                    style={{ ...customStyles.button, color: '#fa8c16' }}
                  >
                    <WarningOutlined /> Trung b√¨nh
                  </Button>
                  <Button 
                    size="small"
                    type={priorityFilter === 'low' ? 'primary' : 'default'}
                    onClick={() => setPriorityFilter('low')}
                    style={{ ...customStyles.button, color: '#1890ff' }}
                  >
                    <InfoCircleOutlined /> Th·∫•p
                  </Button>
                </Space>
              </Space>
            </Card>

            <List
              dataSource={filteredItems}
              renderItem={(item) => (
                <List.Item>
                  <Space style={{ width: '100%', justifyContent: 'space-between' }}>
                    <Space>
                      <Checkbox
                        checked={item.selected}
                        onChange={(e) => handleItemSelection(item.name, e.target.checked)}
                      />
                      <Space direction="vertical" size="small">
                        <Space>
                          {getCategoryIcon(item.category)}
                          <Text strong style={{ color: gradientStyles.textColor }}>{item.name}</Text>
                          <Tag color={getRiskColor(item.risk)}>
                            {item.risk === 'low' ? 'An to√†n' : item.risk === 'medium' ? 'Trung b√¨nh' : 'Cao'}
                          </Tag>
                          <Tag color={getPriorityColor(item.priority)}>
                            {item.priority === 'high' ? 'Cao' : item.priority === 'medium' ? 'Trung b√¨nh' : 'Th·∫•p'}
                          </Tag>
                        </Space>
                        <Text type="secondary" style={{ color: gradientStyles.textColorSecondary }}>{item.description}</Text>
                        {item.details && (
                          <Space>
                            <Text type="secondary" style={{ color: gradientStyles.textColorSecondary, fontSize: '12px' }}>
                              {item.details.fileCount.toLocaleString()} files ‚Ä¢ {item.details.folders.length} folders
                            </Text>
                            {item.details.estimatedFreed && (
                              <Text type="secondary" style={{ color: '#52c41a', fontSize: '12px' }}>
                                ∆Ø·ªõc t√≠nh gi·∫£i ph√≥ng: {item.details.estimatedFreed} MB
                              </Text>
                            )}
                          </Space>
                        )}
                      </Space>
                    </Space>
                    <Space>
                      <Tag color="blue">{item.size}</Tag>
                      {item.details && (
                        <Button 
                          size="small" 
                          type="link"
                          onClick={() => handleShowDetails(item)}
                          style={{ color: gradientStyles.textColor, padding: 0 }}
                        >
                          Chi ti·∫øt
                        </Button>
                      )}
                    </Space>
                  </Space>
                </List.Item>
              )}
            />
          </Card>
        </Col>

        <Col span={8}>
          <Space direction="vertical" style={{ width: '100%' }}>
            <Card title={<span style={{ color: gradientStyles.textColor }}>Th·ªëng k√™ ph√¢n t√≠ch</span>} extra={<FileOutlined style={{ color: '#3b82f6' }} />} style={customStyles.card}>
              <Statistic
                title={<span style={{ color: gradientStyles.textColorSecondary }}>T·ªïng dung l∆∞·ª£ng c√≥ th·ªÉ gi·∫£i ph√≥ng</span>}
                value={cleanupItems
                  .filter(item => item.selected)
                  .reduce((sum, item) => {
                    const size = parseInt(item.size.replace(' MB', '')) || 0;
                    return sum + size;
                  }, 0)
                }
                suffix="MB"
                valueStyle={{ color: '#3b82f6' }}
              />
              <Statistic
                title={<span style={{ color: gradientStyles.textColorSecondary }}>S·ªë m·ª•c ƒë√£ ch·ªçn</span>}
                value={cleanupItems.filter(item => item.selected).length}
                suffix="m·ª•c"
                valueStyle={{ color: '#10b981' }}
              />
              {analysisStats.lastAnalysis && (
                <Statistic
                  title={<span style={{ color: gradientStyles.textColorSecondary }}>L·∫ßn ph√¢n t√≠ch cu·ªëi</span>}
                  value={analysisStats.lastAnalysis.toLocaleString('vi-VN')}
                  valueStyle={{ color: '#fa8c16', fontSize: '12px' }}
                />
              )}
              <div style={{ marginTop: 16 }}>
                <Text style={{ color: gradientStyles.textColorSecondary }}>Ph√¢n lo·∫°i:</Text>
                <div style={{ marginTop: 8 }}>
                  <Text style={{ color: gradientStyles.textColorSecondary }}>Cache: {cleanupItems.filter(item => item.selected && item.category === 'cache').length} m·ª•c</Text><br/>
                  <Text style={{ color: gradientStyles.textColorSecondary }}>File r√°c: {cleanupItems.filter(item => item.selected && item.category === 'trash').length} m·ª•c</Text><br/>
                  <Text style={{ color: gradientStyles.textColorSecondary }}>H·ªá th·ªëng: {cleanupItems.filter(item => item.selected && item.category === 'system').length} m·ª•c</Text><br/>
                  <Text style={{ color: gradientStyles.textColorSecondary }}>·ª®ng d·ª•ng: {cleanupItems.filter(item => item.selected && item.category === 'apps').length} m·ª•c</Text><br/>
                  <Text style={{ color: gradientStyles.textColorSecondary }}>M·∫°ng: {cleanupItems.filter(item => item.selected && item.category === 'network').length} m·ª•c</Text>
                </div>
              </div>
            </Card>

            <Card title={<span style={{ color: gradientStyles.textColor }}>Thao t√°c</span>} extra={<SettingOutlined style={{ color: '#3b82f6' }} />} style={customStyles.card}>
              <Space direction="vertical" style={{ width: '100%' }}>
                <Button 
                  type="primary" 
                  icon={<ReloadOutlined />}
                  onClick={handleAnalyzeSystem}
                  loading={isAnalyzing}
                  block
                  style={customStyles.button}
                >
                  Ph√¢n t√≠ch h·ªá th·ªëng
                </Button>
                <Button 
                  type="primary" 
                  icon={<ThunderboltOutlined />}
                  onClick={() => {
                    // T·ª± ƒë·ªông ch·ªçn c√°c m·ª•c ∆∞u ti√™n cao
                    setCleanupItems(items =>
                      items.map(item => ({
                        ...item,
                        selected: item.priority === 'high' && item.risk === 'low'
                      }))
                    );
                    // Sau ƒë√≥ th·ª±c hi·ªán cleanup
                    setTimeout(() => handleCleanupSystem(), 500);
                  }}
                  loading={isCleaning}
                  block
                  style={{ ...customStyles.button, background: 'linear-gradient(135deg, #52c41a, #73d13d)' }}
                >
                  D·ªçn d·∫πp nhanh (∆Øu ti√™n cao)
                </Button>
                <Button 
                  type="primary" 
                  danger
                  icon={<CleanOutlined />}
                  onClick={handleCleanupSystem}
                  loading={isCleaning}
                  block
                  style={customStyles.button}
                >
                  D·ªçn d·∫πp to√†n di·ªán
                </Button>
              </Space>
            </Card>

            {cleanupResults.length > 0 && (
              <Card title={<span style={{ color: gradientStyles.textColor }}>K·∫øt qu·∫£ d·ªçn d·∫πp</span>} extra={<CheckCircleOutlined style={{ color: '#10b981' }} />} style={customStyles.card}>
                <List
                  size="small"
                  dataSource={cleanupResults}
                  renderItem={(result) => (
                    <List.Item>
                      <Space>
                        {result.status === 'success' && <CheckCircleOutlined style={{ color: '#10b981' }} />}
                        {result.status === 'failed' && <ExclamationCircleOutlined style={{ color: '#ef4444' }} />}
                        {result.status === 'partial' && <WarningOutlined style={{ color: '#fa8c16' }} />}
                        <Text style={{ color: gradientStyles.textColor }}>{result.itemName}</Text>
                        <Tag color={result.status === 'success' ? 'green' : result.status === 'failed' ? 'red' : 'orange'}>
                          {result.sizeFreed}
                        </Tag>
                        {result.itemsRemoved > 0 && (
                          <Text type="secondary" style={{ fontSize: '11px' }}>
                            {result.itemsRemoved} items
                          </Text>
                        )}
                      </Space>
                    </List.Item>
                  )}
                />
                {totalFreed > 0 && (
                  <div style={{ marginTop: 16, textAlign: 'center' }}>
                    <Text strong style={{ color: gradientStyles.textColor }}>T·ªïng c·ªông: {totalFreed} MB</Text>
                  </div>
                )}
              </Card>
            )}
          </Space>
        </Col>
      </Row>

      <Alert
        message="Th√¥ng tin d·ªçn d·∫πp to√†n di·ªán"
        description={
          <div>
            <Text style={{ color: gradientStyles.textColorSecondary }}>
              H·ªá th·ªëng s·∫Ω d·ªçn d·∫πp c√°c lo·∫°i file sau theo th·ª© t·ª± ∆∞u ti√™n:
            </Text>
            <ul style={{ color: gradientStyles.textColorSecondary, fontSize: '12px' }}>
              <li><strong>∆Øu ti√™n cao:</strong> Cache h·ªá th·ªëng, file t·∫°m, cache tr√¨nh duy·ªát, DNS cache</li>
              <li><strong>∆Øu ti√™n trung b√¨nh:</strong> Th√πng r√°c, log h·ªá th·ªëng, cache m√°y in</li>
              <li><strong>∆Øu ti√™n th·∫•p:</strong> File c≈©, ·ª©ng d·ª•ng kh√¥ng s·ª≠ d·ª•ng, th∆∞ m·ª•c tr·ªëng</li>
            </ul>
            <Text style={{ color: '#faad14', fontSize: '12px' }}>
              ‚ö†Ô∏è L∆∞u √Ω: Qu√° tr√¨nh n√†y s·∫Ω x√≥a vƒ©nh vi·ªÖn c√°c file ƒë∆∞·ª£c ch·ªçn. H√£y backup d·ªØ li·ªáu quan tr·ªçng tr∆∞·ªõc khi th·ª±c hi·ªán.
            </Text>
          </div>
        }
        type="info"
        showIcon
        style={{ marginTop: 16, background: gradientStyles.backgroundCard, border: `1px solid ${gradientStyles.borderColor}` }}
      />

      {/* Modal Chi ti·∫øt ph√¢n t√≠ch */}
      <Modal
        title={
          <span style={{ color: gradientStyles.textColor }}>
            Chi ti·∫øt ph√¢n t√≠ch: {selectedItem?.name}
          </span>
        }
        open={detailModalVisible}
        onCancel={() => setDetailModalVisible(false)}
        footer={[
          <Button key="close" onClick={() => setDetailModalVisible(false)}>
            ƒê√≥ng
          </Button>
        ]}
        width={800}
        styles={modalStyles}
      >
        {selectedItem?.details ? (
          <div>
            <Descriptions column={2} size="small" style={{ marginBottom: 16 }}>
              <Descriptions.Item label="T·ªïng dung l∆∞·ª£ng">
                <Text strong style={{ color: gradientStyles.textColor }}>
                  {selectedItem.size}
                </Text>
              </Descriptions.Item>
              <Descriptions.Item label="S·ªë l∆∞·ª£ng file">
                <Text strong style={{ color: gradientStyles.textColor }}>
                  {selectedItem.details.fileCount.toLocaleString()}
                </Text>
              </Descriptions.Item>
              <Descriptions.Item label="S·ªë th∆∞ m·ª•c">
                <Text strong style={{ color: gradientStyles.textColor }}>
                  {selectedItem.details.folders.length}
                </Text>
              </Descriptions.Item>
              <Descriptions.Item label="∆Ø·ªõc t√≠nh gi·∫£i ph√≥ng">
                <Text strong style={{ color: '#52c41a' }}>
                  {selectedItem.details.estimatedFreed} MB
                </Text>
              </Descriptions.Item>
              <Descriptions.Item label="M·ª©c ƒë·ªô an to√†n">
                <Tag color={getRiskColor(selectedItem.risk)}>
                  {selectedItem.details.safetyLevel}
                </Tag>
              </Descriptions.Item>
              <Descriptions.Item label="C·∫≠p nh·∫≠t l·∫ßn cu·ªëi">
                <Text strong style={{ color: gradientStyles.textColor }}>
                  {selectedItem.details.lastModified.toLocaleString('vi-VN')}
                </Text>
              </Descriptions.Item>
            </Descriptions>

            <Divider style={{ borderColor: gradientStyles.borderColor }} />

            <Title level={4} style={{ color: gradientStyles.textColor, marginBottom: 12 }}>
              File l·ªõn nh·∫•t
            </Title>
            <List
              size="small"
              dataSource={selectedItem.details.largestFiles}
              renderItem={(file, index) => (
                <List.Item>
                  <Space>
                    <Text style={{ color: gradientStyles.textColorSecondary }}>
                      {index + 1}.
                    </Text>
                    <Text style={{ color: gradientStyles.textColor }}>
                      {file.name}
                    </Text>
                    <Tag color="blue">{file.size} MB</Tag>
                  </Space>
                </List.Item>
              )}
            />

            <Divider style={{ borderColor: gradientStyles.borderColor }} />

            <Title level={4} style={{ color: gradientStyles.textColor, marginBottom: 12 }}>
              Th∆∞ m·ª•c ch√≠nh
            </Title>
            <List
              size="small"
              dataSource={selectedItem.details.folders.slice(0, 10)}
              renderItem={(folder, index) => (
                <List.Item>
                  <Text style={{ color: gradientStyles.textColorSecondary, fontSize: '12px' }}>
                    {folder}
                  </Text>
                </List.Item>
              )}
            />
          </div>
        ) : (
          <div>
            <Text style={{ color: gradientStyles.textColorSecondary }}>
              Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt cho m·ª•c n√†y. Vui l√≤ng ph√¢n t√≠ch h·ªá th·ªëng ƒë·ªÉ xem th√¥ng tin chi ti·∫øt.
            </Text>
          </div>
        )}
      </Modal>
    </div>
  );
};

export default CleanupManager; 