import { exec } from 'child_process';
import { promisify } from 'util';
import * as fs from 'fs-extra';
import * as path from 'path';
import { executeCmdCommand, executePowerShellScript } from './CommandHelper';

export class UIOptimizationService {
  
  // Lưu cài đặt tối ưu vào file
  private settingsFile = path.join(process.env.APPDATA || '', 'unity_win', 'optimization_settings.json');
  
  constructor() {
    this.ensureSettingsDirectory();
  }

  private ensureSettingsDirectory() {
    const dir = path.dirname(this.settingsFile);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  }

  private loadSettings(): Record<string, boolean> {
    try {
      if (fs.existsSync(this.settingsFile)) {
        const data = fs.readFileSync(this.settingsFile, 'utf8');
        return JSON.parse(data);
      }
    } catch (error) {
      console.error('Lỗi khi đọc cài đặt:', error);
    }
    return {};
  }

  private saveSettings(settings: Record<string, boolean>) {
    try {
      fs.writeFileSync(this.settingsFile, JSON.stringify(settings, null, 2));
    } catch (error) {
      console.error('Lỗi khi lưu cài đặt:', error);
    }
  }

  async getOptimizationSettings(): Promise<Record<string, boolean>> {
    return this.loadSettings();
  }

  // Network category default set for UI grouping
  getNetworkOptimizationOptions(): { id: string; name: string; description: string }[] {
    return [
      { id: 'network_disable_widgets', name: 'Tắt Widgets', description: 'Tắt Windows 11 Widgets (bảng tin, thời tiết, tin tức) để giảm nền' },
      { id: 'network_disable_news', name: 'Tắt News and Interests', description: 'Tắt nguồn tin tức/feeds để giảm tiêu thụ mạng' },
      { id: 'network_disable_weather', name: 'Tắt Thời tiết', description: 'Ẩn/tắt module thời tiết trong Widgets/Taskbar' },
      { id: 'network_disable_background_apps', name: 'Tắt ứng dụng chạy nền', description: 'Tắt toàn bộ app nền UWP/Store' },
      { id: 'network_disable_telemetry', name: 'Tắt Telemetry', description: 'Giảm thu thập dữ liệu chẩn đoán' },
      { id: 'network_disable_feedback', name: 'Tắt Feedback', description: 'Tắt phản hồi tự động gửi về Microsoft' },
      { id: 'network_disable_diagtrack', name: 'Tắt DiagTrack', description: 'Tắt Connected User Experiences and Telemetry' },
      { id: 'network_disable_dmwappushservice', name: 'Tắt dmwappushservice', description: 'Tắt dịch vụ push dữ liệu' },
      { id: 'network_disable_rss_tasks', name: 'Tắt nhiệm vụ RSS', description: 'Vô hiệu hóa các Scheduled Tasks liên quan đến RSS/Feeds' },
    ];
  }

  async applyOptimization(optionId: string, enabled: boolean): Promise<{ success: boolean; message: string }> {
    try {
      const settings = this.loadSettings();
      settings[optionId] = enabled;
      this.saveSettings(settings);

      switch (optionId) {
        case 'taskbar_combine_buttons':
          await this.setTaskbarCombineButtons(enabled);
          break;
        case 'taskbar_show_labels':
          await this.setTaskbarShowLabels(enabled);
          break;
        case 'taskbar_small_icons':
          await this.setTaskbarSmallIcons(enabled);
          break;
        case 'taskbar_show_desktop':
          await this.setTaskbarShowDesktop(enabled);
          break;
        case 'explorer_show_extensions':
          await this.setExplorerShowExtensions(enabled);
          break;
        case 'explorer_show_hidden':
          await this.setExplorerShowHidden(enabled);
          break;
        case 'explorer_compact_mode':
          await this.setExplorerCompactMode(enabled);
          break;
        case 'explorer_quick_access':
          await this.setExplorerQuickAccess(enabled);
          break;
        case 'contextmenu_copy_path':
          await this.setContextMenuCopyPath(enabled);
          break;
        case 'contextmenu_take_ownership':
          await this.setContextMenuTakeOwnership(enabled);
          break;
        case 'contextmenu_compact':
          await this.setContextMenuCompact(enabled);
          break;
        case 'contextmenu_advanced':
          await this.setContextMenuAdvanced(enabled);
          break;
        case 'contextmenu_win10_style':
          await this.setContextMenuWin10Style(enabled);
          break;
        case 'contextmenu_win11_style':
          await this.setContextMenuWin11Style(enabled);
          break;
        case 'contextmenu_7zip_integration':
          await this.setContextMenu7ZipIntegration(enabled);
          break;
        case 'contextmenu_advanced_rename':
          await this.setContextMenuAdvancedRename(enabled);
          break;
        case 'contextmenu_copy_filename':
          await this.setContextMenuCopyFilename(enabled);
          break;
        case 'contextmenu_open_cmd_here':
          await this.setContextMenuOpenCmdHere(enabled);
          break;
        case 'contextmenu_open_powershell':
          await this.setContextMenuOpenPowerShell(enabled);
          break;
        case 'system_fast_startup':
          await this.setSystemFastStartup(enabled);
          break;
        case 'system_services_optimization':
          await this.setSystemServicesOptimization(enabled);
          break;
        case 'system_indexing':
          await this.setSystemIndexing(enabled);
          break;
        case 'system_game_mode':
          await this.setSystemGameMode(enabled);
          break;
        case 'system_network_optimization':
          await this.setSystemNetworkOptimization(enabled);
          break;
        case 'system_disk_optimization':
          await this.setSystemDiskOptimization(enabled);
          break;
        case 'performance_visual_effects':
          await this.setPerformanceVisualEffects(enabled);
          break;
        case 'performance_power_plan':
          await this.setPerformancePowerPlan(enabled);
          break;
        case 'performance_virtual_memory':
          await this.setPerformanceVirtualMemory(enabled);
          break;
        case 'performance_ram_optimization':
          await this.setPerformanceRAMOptimization(enabled);
          break;
        case 'performance_cpu_optimization':
          await this.setPerformanceCPUOptimization(enabled);
          break;
        case 'performance_gaming_mode':
          await this.setPerformanceGamingMode(enabled);
          break;
        case 'appearance_dark_mode':
          await this.setAppearanceDarkMode(enabled);
          break;
        case 'appearance_transparency':
          await this.setAppearanceTransparency(enabled);
          break;
        case 'appearance_animations':
          await this.setAppearanceAnimations(enabled);
          break;
        case 'appearance_accent_color':
          await this.setAppearanceAccentColor(enabled);
          break;
        case 'appearance_custom_cursor':
          await this.setAppearanceCustomCursor(enabled);
          break;
        case 'appearance_desktop_icons':
          await this.setAppearanceDesktopIcons(enabled);
          break;
        case 'taskbar_win11_style':
          await this.setTaskbarWin11Style(enabled);
          break;
        case 'taskbar_center_icons':
          await this.setTaskbarCenterIcons(enabled);
          break;
        case 'explorer_win11_ribbon':
          await this.setExplorerWin11Ribbon(enabled);
          break;
        case 'explorer_preview_pane':
          await this.setExplorerPreviewPane(enabled);
          break;
        // Network optimizations (Win11)
        case 'network_disable_widgets':
          await this.setDisableWidgets(enabled);
          break;
        case 'network_disable_news':
          await this.setDisableNewsFeeds(enabled);
          break;
        case 'network_disable_weather':
          await this.setDisableWeather(enabled);
          break;
        case 'network_disable_background_apps':
          await this.setDisableBackgroundApps(enabled);
          break;
        case 'network_disable_telemetry':
          await this.setDisableTelemetry(enabled);
          break;
        case 'network_disable_feedback':
          await this.setDisableFeedback(enabled);
          break;
        case 'network_disable_diagtrack':
          await this.setDisableService('DiagTrack', enabled);
          break;
        case 'network_disable_dmwappushservice':
          await this.setDisableService('dmwappushservice', enabled);
          break;
        case 'network_disable_rss_tasks':
          await this.setDisableRSSTasks(enabled);
          break;
        default:
          return { success: false, message: 'Tùy chọn không được hỗ trợ' };
      }

      return { 
        success: true, 
        message: `${enabled ? 'Bật' : 'Tắt'} ${optionId} thành công` 
      };
    } catch (error) {
      console.error('Lỗi khi áp dụng tối ưu:', error);
      return { success: false, message: 'Lỗi khi áp dụng tối ưu' };
    }
  }

  async applyAllOptimizations(options: any[]): Promise<{ success: boolean; message: string }> {
    try {
      let successCount = 0;
      let errorCount = 0;

      for (const option of options) {
        if (option.enabled) {
          const result = await this.applyOptimization(option.id, true);
          if (result.success) {
            successCount++;
          } else {
            errorCount++;
          }
        }
      }

      return {
        success: errorCount === 0,
        message: `Áp dụng ${successCount} tối ưu thành công${errorCount > 0 ? `, ${errorCount} lỗi` : ''}`
      };
    } catch (error) {
      console.error('Lỗi khi áp dụng tất cả tối ưu:', error);
      return { success: false, message: 'Lỗi khi áp dụng tối ưu' };
    }
  }

  async resetOptimizations(): Promise<{ success: boolean; message: string }> {
    try {
      // Xóa file cài đặt
      if (fs.existsSync(this.settingsFile)) {
        fs.unlinkSync(this.settingsFile);
      }

      // Reset các cài đặt về mặc định
      await this.resetTaskbarSettings();
      await this.resetExplorerSettings();
      await this.resetContextMenuSettings();

      return { success: true, message: 'Đã đặt lại tất cả cài đặt về mặc định' };
    } catch (error) {
      console.error('Lỗi khi đặt lại cài đặt:', error);
      return { success: false, message: 'Lỗi khi đặt lại cài đặt' };
    }
  }

  async exportOptimizationSettings(data: any): Promise<{ success: boolean; message: string }> {
    try {
      const { dialog } = require('electron');
      const { app } = require('electron');
      
      const result = await dialog.showSaveDialog({
        title: 'Xuất cài đặt tối ưu',
        defaultPath: 'optimization-settings.json',
        filters: [
          { name: 'JSON Files', extensions: ['json'] },
          { name: 'All Files', extensions: ['*'] }
        ]
      });

      if (!result.canceled && result.filePath) {
        await fs.writeJson(result.filePath, data, { spaces: 2 });
        return { success: true, message: `Đã xuất cài đặt vào: ${result.filePath}` };
      } else {
        return { success: false, message: 'Hủy xuất cài đặt' };
      }
    } catch (error) {
      console.error('Lỗi khi xuất cài đặt:', error);
      return { success: false, message: 'Lỗi khi xuất cài đặt' };
    }
  }

  async importOptimizationSettings(): Promise<{ success: boolean; message: string }> {
    try {
      const { dialog } = require('electron');
      
      const result = await dialog.showOpenDialog({
        title: 'Nhập cài đặt tối ưu',
        filters: [
          { name: 'JSON Files', extensions: ['json'] },
          { name: 'All Files', extensions: ['*'] }
        ],
        properties: ['openFile']
      });

      if (!result.canceled && result.filePaths.length > 0) {
        const filePath = result.filePaths[0];
        const importedData = await fs.readJson(filePath);
        
        if (importedData.optimizations) {
          // Apply all imported optimizations
          for (const option of importedData.optimizations) {
            await this.applyOptimization(option.id, option.enabled);
          }
          return { success: true, message: `Đã nhập và áp dụng cài đặt từ: ${filePath}` };
        } else {
          return { success: false, message: 'File không đúng định dạng' };
        }
      } else {
        return { success: false, message: 'Hủy nhập cài đặt' };
      }
    } catch (error) {
      console.error('Lỗi khi nhập cài đặt:', error);
      return { success: false, message: 'Lỗi khi nhập cài đặt' };
    }
  }

  async getCurrentWindowsSettings(): Promise<Record<string, boolean>> {
    try {
      const script = `
        $settings = @{}
        
        # Taskbar settings - Sử dụng default values nếu registry không tồn tại
        try {
          $combine = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" -Name "TaskbarGlomLevel" -ErrorAction SilentlyContinue
          if ($combine -and $null -ne $combine.TaskbarGlomLevel) {
            $settings['taskbar_combine_buttons'] = ($combine.TaskbarGlomLevel -eq 1)
          } else {
            $settings['taskbar_combine_buttons'] = $true  # Default Windows behavior
          }
        } catch { $settings['taskbar_combine_buttons'] = $true }
        
        try {
          $smallIcons = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" -Name "TaskbarSmallIcons" -ErrorAction SilentlyContinue
          if ($smallIcons -and $null -ne $smallIcons.TaskbarSmallIcons) {
            $settings['taskbar_small_icons'] = ($smallIcons.TaskbarSmallIcons -eq 1)
            $settings['taskbar_show_labels'] = ($smallIcons.TaskbarSmallIcons -eq 0)
          } else {
            $settings['taskbar_small_icons'] = $false  # Default is large icons
            $settings['taskbar_show_labels'] = $true   # Default shows labels
          }
        } catch { 
          $settings['taskbar_small_icons'] = $false
          $settings['taskbar_show_labels'] = $true 
        }
        
        try {
          $showDesktop = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" -Name "DisablePreviewDesktop" -ErrorAction SilentlyContinue
          if ($showDesktop -and $null -ne $showDesktop.DisablePreviewDesktop) {
            $settings['taskbar_show_desktop'] = ($showDesktop.DisablePreviewDesktop -eq 0)
          } else {
            $settings['taskbar_show_desktop'] = $true  # Default enabled
          }
        } catch { $settings['taskbar_show_desktop'] = $true }
        
        try {
          $taskbarAl = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" -Name "TaskbarAl" -ErrorAction SilentlyContinue
          if ($taskbarAl -and $null -ne $taskbarAl.TaskbarAl) {
            $settings['taskbar_win11_style'] = ($taskbarAl.TaskbarAl -eq 1)
            $settings['taskbar_center_icons'] = ($taskbarAl.TaskbarAl -eq 1)
          } else {
            # Check Windows version to determine default
            $winVersion = [System.Environment]::OSVersion.Version.Major
            $isWin11 = $winVersion -ge 10 -and [System.Environment]::OSVersion.Version.Build -ge 22000
            $settings['taskbar_win11_style'] = $isWin11
            $settings['taskbar_center_icons'] = $isWin11
          }
        } catch { 
          $settings['taskbar_win11_style'] = $false
          $settings['taskbar_center_icons'] = $false 
        }
        
        # Explorer settings - Kiểm tra chính xác hơn
        try {
          $extensions = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" -Name "HideFileExt" -ErrorAction SilentlyContinue
          if ($extensions -and $null -ne $extensions.HideFileExt) {
            $settings['explorer_show_extensions'] = ($extensions.HideFileExt -eq 0)
          } else {
            $settings['explorer_show_extensions'] = $false  # Default hides extensions
          }
        } catch { $settings['explorer_show_extensions'] = $false }
        
        try {
          $hidden = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" -Name "Hidden" -ErrorAction SilentlyContinue
          if ($hidden -and $null -ne $hidden.Hidden) {
            $settings['explorer_show_hidden'] = ($hidden.Hidden -eq 1)
          } else {
            $settings['explorer_show_hidden'] = $false  # Default hides hidden files
          }
        } catch { $settings['explorer_show_hidden'] = $false }
        
        try {
          $compact = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" -Name "UseCompactMode" -ErrorAction SilentlyContinue
          if ($compact -and $null -ne $compact.UseCompactMode) {
            $settings['explorer_compact_mode'] = ($compact.UseCompactMode -eq 1)
          } else {
            $settings['explorer_compact_mode'] = $false  # Default is not compact
          }
        } catch { $settings['explorer_compact_mode'] = $false }
        
        try {
          $quickAccess = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" -Name "LaunchTo" -ErrorAction SilentlyContinue
          if ($quickAccess -and $null -ne $quickAccess.LaunchTo) {
            $settings['explorer_quick_access'] = ($quickAccess.LaunchTo -eq 1)
          } else {
            $settings['explorer_quick_access'] = $true  # Default in Windows 10/11
          }
        } catch { $settings['explorer_quick_access'] = $true }
        
        try {
          $previewPane = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer" -Name "ShowPreviewPane" -ErrorAction SilentlyContinue
          if ($previewPane -and $null -ne $previewPane.ShowPreviewPane) {
            $settings['explorer_preview_pane'] = ($previewPane.ShowPreviewPane -eq 1)
          } else {
            $settings['explorer_preview_pane'] = $false  # Default disabled
          }
        } catch { $settings['explorer_preview_pane'] = $false }
        
        # Win11 Ribbon - kiểm tra registry khác
        try {
          $ribbon = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Ribbon" -Name "MinimizedStateTabletModeOff" -ErrorAction SilentlyContinue
          if ($ribbon -and $null -ne $ribbon.MinimizedStateTabletModeOff) {
            $settings['explorer_win11_ribbon'] = ($ribbon.MinimizedStateTabletModeOff -eq 0)
          } else {
            $settings['explorer_win11_ribbon'] = $false
          }
        } catch { $settings['explorer_win11_ribbon'] = $false }
        
        # System settings
        try {
          $fastStartup = Get-ItemProperty -Path "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Power" -Name "HiberbootEnabled" -ErrorAction SilentlyContinue
          if ($fastStartup -and $null -ne $fastStartup.HiberbootEnabled) {
            $settings['system_fast_startup'] = ($fastStartup.HiberbootEnabled -eq 1)
          } else {
            $settings['system_fast_startup'] = $true  # Default enabled in Windows 10/11
          }
        } catch { $settings['system_fast_startup'] = $true }
        
        try {
          $gameMode1 = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\GameBar" -Name "AllowAutoGameMode" -ErrorAction SilentlyContinue
          $gameMode2 = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\GameBar" -Name "AutoGameModeEnabled" -ErrorAction SilentlyContinue
          if (($gameMode1 -and $null -ne $gameMode1.AllowAutoGameMode) -or ($gameMode2 -and $null -ne $gameMode2.AutoGameModeEnabled)) {
            $settings['system_game_mode'] = (($gameMode1.AllowAutoGameMode -eq 1) -or ($gameMode2.AutoGameModeEnabled -eq 1))
          } else {
            $settings['system_game_mode'] = $true  # Default enabled
          }
        } catch { $settings['system_game_mode'] = $true }
        
        # Services optimization - kiểm tra trạng thái services
        try {
          $faxService = Get-Service -Name "Fax" -ErrorAction SilentlyContinue
          $winrmService = Get-Service -Name "WinRM" -ErrorAction SilentlyContinue
          if ($faxService -and $winrmService) {
            $settings['system_services_optimization'] = (($faxService.StartType -eq 'Disabled') -and ($winrmService.StartType -eq 'Disabled'))
          } else {
            $settings['system_services_optimization'] = $false
          }
        } catch { $settings['system_services_optimization'] = $false }
        
        # Indexing
        try {
          $searchService = Get-Service -Name "WSearch" -ErrorAction SilentlyContinue
          if ($searchService) {
            $settings['system_indexing'] = ($searchService.Status -eq 'Running')
          } else {
            $settings['system_indexing'] = $true
          }
        } catch { $settings['system_indexing'] = $true }
        
        # Network optimization
        try {
          $autoTuning = netsh int tcp show global | Select-String "Receive Window Auto-Tuning Level"
          if ($autoTuning) {
            $settings['system_network_optimization'] = ($autoTuning -match "normal")
          } else {
            $settings['system_network_optimization'] = $false
          }
        } catch { $settings['system_network_optimization'] = $false }
        
        # Disk optimization
        try {
          $lastAccess = fsutil behavior query DisableLastAccess 2>$null
          if ($lastAccess) {
            $settings['system_disk_optimization'] = ($lastAccess -match "DisableLastAccess = 1")
          } else {
            $settings['system_disk_optimization'] = $false
          }
        } catch { $settings['system_disk_optimization'] = $false }
        
        # Performance settings
        try {
          $visualEffects = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VisualEffects" -Name "VisualFXSetting" -ErrorAction SilentlyContinue
          if ($visualEffects -and $null -ne $visualEffects.VisualFXSetting) {
            $settings['performance_visual_effects'] = ($visualEffects.VisualFXSetting -eq 2)
          } else {
            $settings['performance_visual_effects'] = $false  # Default is best appearance
          }
        } catch { $settings['performance_visual_effects'] = $false }
        
        # Power plan
        try {
          $activePlan = powercfg /getactivescheme 2>$null
          if ($activePlan) {
            $settings['performance_power_plan'] = ($activePlan -match "High performance" -or $activePlan -match "8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c")
          } else {
            $settings['performance_power_plan'] = $false
          }
        } catch { $settings['performance_power_plan'] = $false }
        
        # Virtual memory
        try {
          $pagefile = Get-WmiObject -Class Win32_PageFileSetting -ErrorAction SilentlyContinue
          if ($pagefile) {
            $settings['performance_virtual_memory'] = ($pagefile.InitialSize -eq 0 -and $pagefile.MaximumSize -eq 0)
          } else {
            $settings['performance_virtual_memory'] = $true  # System managed by default
          }
        } catch { $settings['performance_virtual_memory'] = $true }
        
        # RAM optimization
        try {
          $largeCache = Get-ItemProperty -Path "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management" -Name "LargeSystemCache" -ErrorAction SilentlyContinue
          if ($largeCache -and $null -ne $largeCache.LargeSystemCache) {
            $settings['performance_ram_optimization'] = ($largeCache.LargeSystemCache -eq 1)
          } else {
            $settings['performance_ram_optimization'] = $false
          }
        } catch { $settings['performance_ram_optimization'] = $false }
        
        # CPU optimization
        try {
          $cpuPriority = Get-ItemProperty -Path "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\PriorityControl" -Name "Win32PrioritySeparation" -ErrorAction SilentlyContinue
          if ($cpuPriority -and $null -ne $cpuPriority.Win32PrioritySeparation) {
            $settings['performance_cpu_optimization'] = ($cpuPriority.Win32PrioritySeparation -eq 38)
          } else {
            $settings['performance_cpu_optimization'] = $false
          }
        } catch { $settings['performance_cpu_optimization'] = $false }
        
        # Gaming mode (same as system_game_mode but for performance category)
        $settings['performance_gaming_mode'] = $settings['system_game_mode']
        
        # Appearance settings - Đã test và hoạt động tốt
        try {
          $darkMode = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize" -Name "AppsUseLightTheme" -ErrorAction SilentlyContinue
          if ($darkMode -and $null -ne $darkMode.AppsUseLightTheme) {
            $settings['appearance_dark_mode'] = ($darkMode.AppsUseLightTheme -eq 0)
          } else {
            $settings['appearance_dark_mode'] = $false  # Default is light mode
          }
        } catch { $settings['appearance_dark_mode'] = $false }
        
        try {
          $transparency = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize" -Name "EnableTransparency" -ErrorAction SilentlyContinue
          if ($transparency -and $null -ne $transparency.EnableTransparency) {
            $settings['appearance_transparency'] = ($transparency.EnableTransparency -eq 1)
          } else {
            $settings['appearance_transparency'] = $true  # Default enabled
          }
        } catch { $settings['appearance_transparency'] = $true }
        
        try {
          $animations = Get-ItemProperty -Path "HKCU:\\Control Panel\\Desktop\\WindowMetrics" -Name "MinAnimate" -ErrorAction SilentlyContinue
          if ($animations -and $null -ne $animations.MinAnimate) {
            $settings['appearance_animations'] = ($animations.MinAnimate -eq 1)
          } else {
            $settings['appearance_animations'] = $true  # Default enabled
          }
        } catch { $settings['appearance_animations'] = $true }
        
        try {
          $accentColor = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize" -Name "ColorPrevalence" -ErrorAction SilentlyContinue
          if ($accentColor -and $null -ne $accentColor.ColorPrevalence) {
            $settings['appearance_accent_color'] = ($accentColor.ColorPrevalence -eq 1)
          } else {
            $settings['appearance_accent_color'] = $false
          }
        } catch { $settings['appearance_accent_color'] = $false }
        
        try {
          $cursor = Get-ItemProperty -Path "HKCU:\\Control Panel\\Cursors" -Name "Arrow" -ErrorAction SilentlyContinue
          if ($cursor -and $cursor.Arrow) {
            $settings['appearance_custom_cursor'] = ($cursor.Arrow -ne "")
          } else {
            $settings['appearance_custom_cursor'] = $false
          }
        } catch { $settings['appearance_custom_cursor'] = $false }
        
        try {
          $desktopIcons = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" -Name "HideIcons" -ErrorAction SilentlyContinue
          if ($desktopIcons -and $null -ne $desktopIcons.HideIcons) {
            $settings['appearance_desktop_icons'] = ($desktopIcons.HideIcons -eq 0)
          } else {
            $settings['appearance_desktop_icons'] = $true  # Default shows icons
          }
        } catch { $settings['appearance_desktop_icons'] = $true }
        
        # Context menu settings - Đã test
        $settings['contextmenu_copy_path'] = (Test-Path "HKCU:\\Software\\Classes\\*\\shell\\copypath" -ErrorAction SilentlyContinue)
        $settings['contextmenu_take_ownership'] = (Test-Path "HKCU:\\Software\\Classes\\*\\shell\\takeownership" -ErrorAction SilentlyContinue)
        $settings['contextmenu_win10_style'] = (Test-Path "HKCU:\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}" -ErrorAction SilentlyContinue)
        $settings['contextmenu_win11_style'] = -not $settings['contextmenu_win10_style']
        $settings['contextmenu_compact'] = $false  # Custom implementation needed
        $settings['contextmenu_advanced'] = (Test-Path "HKCU:\\Software\\Classes\\*\\shell\\advanced" -ErrorAction SilentlyContinue)
        $settings['contextmenu_7zip_integration'] = (Test-Path "HKCU:\\Software\\Classes\\*\\shell\\7-Zip" -ErrorAction SilentlyContinue)
        $settings['contextmenu_advanced_rename'] = (Test-Path "HKCU:\\Software\\Classes\\*\\shell\\AdvancedRename" -ErrorAction SilentlyContinue)
        $settings['contextmenu_copy_filename'] = (Test-Path "HKCU:\\Software\\Classes\\*\\shell\\CopyFilename" -ErrorAction SilentlyContinue)
        $settings['contextmenu_open_cmd_here'] = (Test-Path "HKCU:\\Software\\Classes\\Directory\\Background\\shell\\cmd" -ErrorAction SilentlyContinue)
        $settings['contextmenu_open_powershell'] = (Test-Path "HKCU:\\Software\\Classes\\Directory\\Background\\shell\\PowerShell" -ErrorAction SilentlyContinue)
        
        # Network optimization settings - Windows 11 specific
        try {
          # Widgets - check if disabled
          $widgetsDisabled = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" -Name "TaskbarDa" -ErrorAction SilentlyContinue
          if ($widgetsDisabled -and $null -ne $widgetsDisabled.TaskbarDa) {
            $settings['network_disable_widgets'] = ($widgetsDisabled.TaskbarDa -eq 0)
          } else {
            $settings['network_disable_widgets'] = $false  # Default enabled
          }
        } catch { $settings['network_disable_widgets'] = $false }
        
        try {
          # News and Interests - check if disabled
          $newsDisabled = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" -Name "TaskbarMn" -ErrorAction SilentlyContinue
          if ($newsDisabled -and $null -ne $newsDisabled.TaskbarMn) {
            $settings['network_disable_news'] = ($newsDisabled.TaskbarMn -eq 0)
          } else {
            $settings['network_disable_news'] = $false  # Default enabled
          }
        } catch { $settings['network_disable_news'] = $false }
        
        try {
          # Weather - check if disabled
          $weatherDisabled = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" -Name "TaskbarMn" -ErrorAction SilentlyContinue
          if ($weatherDisabled -and $null -ne $weatherDisabled.TaskbarMn) {
            $settings['network_disable_weather'] = ($weatherDisabled.TaskbarMn -eq 0)
          } else {
            $settings['network_disable_weather'] = $false  # Default enabled
          }
        } catch { $settings['network_disable_weather'] = $false }
        
        try {
          # Background apps - check if disabled
          $backgroundAppsDisabled = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\BackgroundAccessApplications" -Name "GlobalUserDisabled" -ErrorAction SilentlyContinue
          if ($backgroundAppsDisabled -and $null -ne $backgroundAppsDisabled.GlobalUserDisabled) {
            $settings['network_disable_background_apps'] = ($backgroundAppsDisabled.GlobalUserDisabled -eq 1)
          } else {
            $settings['network_disable_background_apps'] = $false  # Default enabled
          }
        } catch { $settings['network_disable_background_apps'] = $false }
        
        try {
          # Telemetry - check if disabled
          $telemetryDisabled = Get-ItemProperty -Path "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\DataCollection" -Name "AllowTelemetry" -ErrorAction SilentlyContinue
          if ($telemetryDisabled -and $null -ne $telemetryDisabled.AllowTelemetry) {
            $settings['network_disable_telemetry'] = ($telemetryDisabled.AllowTelemetry -eq 0)
          } else {
            $settings['network_disable_telemetry'] = $false  # Default enabled
          }
        } catch { $settings['network_disable_telemetry'] = $false }
        
        try {
          # Feedback - check if disabled
          $feedbackDisabled = Get-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Siuf\\Rules" -Name "NumberOfSIUFInPeriod" -ErrorAction SilentlyContinue
          if ($feedbackDisabled -and $null -ne $feedbackDisabled.NumberOfSIUFInPeriod) {
            $settings['network_disable_feedback'] = ($feedbackDisabled.NumberOfSIUFInPeriod -eq 0)
          } else {
            $settings['network_disable_feedback'] = $false  # Default enabled
          }
        } catch { $settings['network_disable_feedback'] = $false }
        
        try {
          # DiagTrack service - check if disabled
          $diagTrackService = Get-Service -Name "DiagTrack" -ErrorAction SilentlyContinue
          if ($diagTrackService) {
            $settings['network_disable_diagtrack'] = ($diagTrackService.StartType -eq 'Disabled')
          } else {
            $settings['network_disable_diagtrack'] = $false
          }
        } catch { $settings['network_disable_diagtrack'] = $false }
        
        try {
          # dmwappushservice - check if disabled
          $dmwappushService = Get-Service -Name "dmwappushservice" -ErrorAction SilentlyContinue
          if ($dmwappushService) {
            $settings['network_disable_dmwappushservice'] = ($dmwappushService.StartType -eq 'Disabled')
          } else {
            $settings['network_disable_dmwappushservice'] = $false
          }
        } catch { $settings['network_disable_dmwappushservice'] = $false }
        
        try {
          # RSS tasks - check if disabled
          $rssTasks = Get-ScheduledTask -TaskName "*RSS*" -ErrorAction SilentlyContinue
          if ($rssTasks) {
            $settings['network_disable_rss_tasks'] = $false  # Tasks exist, not disabled
          } else {
            $settings['network_disable_rss_tasks'] = $true   # No RSS tasks found
          }
        } catch { $settings['network_disable_rss_tasks'] = $true }
        
        ConvertTo-Json $settings
      `;
      
      const result = await executePowerShellScript(script);
      const settingsJson = result.stdout || '{}';
      return JSON.parse(settingsJson);
    } catch (error) {
      console.error('Lỗi khi lấy Windows settings:', error);
      return {};
    }
  }

  // Taskbar optimizations
  private async setTaskbarCombineButtons(enabled: boolean): Promise<void> {
    const value = enabled ? 1 : 0;
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v TaskbarGlomLevel /t REG_DWORD /d ${value} /f`);
  }

  private async setTaskbarShowLabels(enabled: boolean): Promise<void> {
    // TaskbarSmallIcons: 0 = show labels (large icons), 1 = hide labels (small icons)
    const value = enabled ? 0 : 1;
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v TaskbarSmallIcons /t REG_DWORD /d ${value} /f`);
  }

  private async setTaskbarSmallIcons(enabled: boolean): Promise<void> {
    const value = enabled ? 1 : 0;
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v TaskbarSmallIcons /t REG_DWORD /d ${value} /f`);
  }

  private async setTaskbarShowDesktop(enabled: boolean): Promise<void> {
    // DisablePreviewDesktop: 0 = enable peek, 1 = disable peek
    const value = enabled ? 0 : 1;
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v DisablePreviewDesktop /t REG_DWORD /d ${value} /f`);
  }

  // Explorer optimizations
  private async setExplorerShowExtensions(enabled: boolean): Promise<void> {
    const value = enabled ? 0 : 1;
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v HideFileExt /t REG_DWORD /d ${value} /f`);
  }

  private async setExplorerShowHidden(enabled: boolean): Promise<void> {
    const value = enabled ? 1 : 0;
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v Hidden /t REG_DWORD /d ${value} /f`);
  }

  private async setExplorerCompactMode(enabled: boolean): Promise<void> {
    const value = enabled ? 1 : 0;
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v UseCompactMode /t REG_DWORD /d ${value} /f`);
  }

  private async setExplorerQuickAccess(enabled: boolean): Promise<void> {
    if (enabled) {
      await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v LaunchTo /t REG_DWORD /d 1 /f`);
    } else {
      await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v LaunchTo /t REG_DWORD /d 0 /f`);
    }
  }

  // Context menu optimizations
  private async setContextMenuCopyPath(enabled: boolean): Promise<void> {
    if (enabled) {
      // Phiên bản ổn định cho Windows 11: dùng powershell để copy đường dẫn đầy đủ
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\*\\shell\\copypath" /ve /d "Copy as path" /f`);
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\*\\shell\\copypath\\command" /ve /d "powershell.exe -NoProfile -Command \"[System.Windows.Forms.Clipboard]::SetText(\"%1\")\"" /f`);
    } else {
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\*\\shell\\copypath" /f`);
    }
  }

  private async setContextMenuTakeOwnership(enabled: boolean): Promise<void> {
    if (enabled) {
      // Thêm "Take Ownership" theo chuẩn Windows (verb "runas") cho file và thư mục
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\*\\shell\\runas" /ve /d "Take Ownership" /f`);
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\*\\shell\\runas" /v HasLUAShield /t REG_SZ /d "" /f`);
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\*\\shell\\runas\\command" /ve /d "cmd.exe /c takeown /f \"%1\" && icacls \"%1\" /grant administrators:F" /f`);

      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\Directory\\shell\\runas" /ve /d "Take Ownership" /f`);
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\Directory\\shell\\runas" /v HasLUAShield /t REG_SZ /d "" /f`);
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\Directory\\shell\\runas\\command" /ve /d "cmd.exe /c takeown /f \"%1\" /r /d y && icacls \"%1\" /grant administrators:F /t" /f`);
    } else {
      // Xóa các mục "Take Ownership"
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\*\\shell\\runas" /f`);
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\Directory\\shell\\runas" /f`);
      // Xóa biến thể cũ nếu có
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\*\\shell\\takeownership" /f`);
    }
  }

  private async setContextMenuCompact(enabled: boolean): Promise<void> {
    if (enabled) {
      // Loại bỏ một số mục menu không cần thiết
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\*\\shellex\\ContextMenuHandlers\\Briefcase" /ve /d "" /f`);
    } else {
      // Khôi phục menu mặc định
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\*\\shellex\\ContextMenuHandlers\\Briefcase" /f`);
    }
  }

  private async setContextMenuAdvanced(enabled: boolean): Promise<void> {
    if (enabled) {
      // Thêm các tùy chọn nâng cao
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\*\\shell\\advanced" /ve /d "Advanced" /f`);
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\*\\shell\\advanced\\command" /ve /d "cmd.exe /c echo Advanced options" /f`);
    } else {
      // Xóa các tùy chọn nâng cao
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\*\\shell\\advanced" /f`);
    }
  }

  // Reset methods
  private async resetTaskbarSettings(): Promise<void> {
    try {
      await executeCmdCommand(`reg delete "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v TaskbarGlomLevel /f`);
      await executeCmdCommand(`reg delete "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v TaskbarNoSmallIcons /f`);
      await executeCmdCommand(`reg delete "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v TaskbarSmallIcons /f`);
      await executeCmdCommand(`reg delete "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v EnablePeek /f`);
    } catch (error) {
      console.error('Lỗi khi reset taskbar settings:', error);
    }
  }

  private async resetExplorerSettings(): Promise<void> {
    try {
      await executeCmdCommand(`reg delete "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v HideFileExt /f`);
      await executeCmdCommand(`reg delete "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v Hidden /f`);
      await executeCmdCommand(`reg delete "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v UseCompactMode /f`);
      await executeCmdCommand(`reg delete "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v LaunchTo /f`);
    } catch (error) {
      console.error('Lỗi khi reset explorer settings:', error);
    }
  }

  private async resetContextMenuSettings(): Promise<void> {
    try {
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\*\\shell\\copypath" /f`);
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\*\\shell\\takeownership" /f`);
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\*\\shell\\advanced" /f`);
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\*\\shellex\\ContextMenuHandlers\\Briefcase" /f`);
    } catch (error) {
      console.error('Lỗi khi reset context menu settings:', error);
    }
  }

  // Additional Context Menu Methods
  private async setContextMenuWin10Style(enabled: boolean): Promise<void> {
    // Windows 11: tạo khóa để hiển thị full context menu kiểu Win10
    if (enabled) {
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}" /f`);
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32" /ve /d "" /f`);
    } else {
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}" /f`);
    }
  }

  private async setContextMenuWin11Style(enabled: boolean): Promise<void> {
    // Windows 11: xóa khóa Win10 để quay về context menu mặc định Win11
    if (enabled) {
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}" /f`);
    } else {
      await this.setContextMenuWin10Style(true);
    }
  }

  private async setContextMenu7ZipIntegration(enabled: boolean): Promise<void> {
    if (enabled) {
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\*\\shell\\7-Zip" /ve /d "7-Zip" /f`);
    } else {
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\*\\shell\\7-Zip" /f`);
    }
  }

  private async setContextMenuAdvancedRename(enabled: boolean): Promise<void> {
    if (enabled) {
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\*\\shell\\AdvancedRename" /ve /d "Advanced Rename" /f`);
    } else {
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\*\\shell\\AdvancedRename" /f`);
    }
  }

  private async setContextMenuCopyFilename(enabled: boolean): Promise<void> {
    if (enabled) {
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\*\\shell\\CopyFilename" /ve /d "Copy filename" /f`);
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\*\\shell\\CopyFilename\\command" /ve /d "cmd /c echo %~n1%~x1 | clip" /f`);
    } else {
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\*\\shell\\CopyFilename" /f`);
    }
  }

  private async setContextMenuOpenCmdHere(enabled: boolean): Promise<void> {
    if (enabled) {
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\Directory\\Background\\shell\\cmd" /ve /d "Open command window here" /f`);
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\Directory\\Background\\shell\\cmd\\command" /ve /d "cmd.exe /s /k pushd \"%V\"" /f`);
    } else {
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\Directory\\Background\\shell\\cmd" /f`);
    }
  }

  private async setContextMenuOpenPowerShell(enabled: boolean): Promise<void> {
    if (enabled) {
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\Directory\\Background\\shell\\PowerShell" /ve /d "Open PowerShell window here" /f`);
      await executeCmdCommand(`reg add "HKCU\\Software\\Classes\\Directory\\Background\\shell\\PowerShell\\command" /ve /d "powershell.exe -noexit -command Set-Location '%V'" /f`);
    } else {
      await executeCmdCommand(`reg delete "HKCU\\Software\\Classes\\Directory\\Background\\shell\\PowerShell" /f`);
    }
  }

  // Additional Taskbar Methods
  private async setTaskbarWin11Style(enabled: boolean): Promise<void> {
    const value = enabled ? 1 : 0;
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v TaskbarAl /t REG_DWORD /d ${value} /f`);
  }

  private async setTaskbarCenterIcons(enabled: boolean): Promise<void> {
    const value = enabled ? 1 : 0;
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v TaskbarAl /t REG_DWORD /d ${value} /f`);
  }

  // Additional Explorer Methods  
  private async setExplorerWin11Ribbon(enabled: boolean): Promise<void> {
    const value = enabled ? 0 : 1;
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Ribbon" /v MinimizedStateTabletModeOff /t REG_DWORD /d ${value} /f`);
  }

  private async setExplorerPreviewPane(enabled: boolean): Promise<void> {
    const value = enabled ? 1 : 0;
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer" /v ShowPreviewPane /t REG_DWORD /d ${value} /f`);
  }

  // System Optimization Methods
  // === Network group methods ===
  private async setDisableWidgets(enabled: boolean): Promise<void> {
    // Widgets (Windows 11) - 0=Disable, 1=Enable (policy inverted)
    const value = enabled ? 1 : 0; // enabled=true -> disable widgets
    await executeCmdCommand(`reg add "HKLM\\SOFTWARE\\Policies\\Microsoft\\Dsh" /v AllowNewsAndInterests /t REG_DWORD /d 0 /f`);
    await executeCmdCommand(`reg add "HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Widgets" /v AllowWidgets /t REG_DWORD /d ${enabled ? 0 : 1} /f`);
  }

  private async setDisableNewsFeeds(enabled: boolean): Promise<void> {
    // News and Interests (Win10) & Feeds (Win11)
    await executeCmdCommand(`reg add "HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Feeds" /v EnableFeeds /t REG_DWORD /d ${enabled ? 0 : 1} /f`);
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Feeds" /v ShellFeedsTaskbarViewMode /t REG_DWORD /d ${enabled ? 2 : 0} /f`);
  }

  private async setDisableWeather(enabled: boolean): Promise<void> {
    // Ẩn thời tiết trên taskbar (Win11: thuộc Widgets)
    await this.setDisableWidgets(enabled);
  }

  private async setDisableBackgroundApps(enabled: boolean): Promise<void> {
    // Tắt app nền UWP
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\BackgroundAccessApplications" /v GlobalUserDisabled /t REG_DWORD /d ${enabled ? 1 : 0} /f`);
    await executeCmdCommand(`reg add "HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\AppPrivacy" /v LetAppsRunInBackground /t REG_DWORD /d ${enabled ? 2 : 0} /f`);
  }

  private async setDisableTelemetry(enabled: boolean): Promise<void> {
    await executeCmdCommand(`reg add "HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\DataCollection" /v AllowTelemetry /t REG_DWORD /d ${enabled ? 0 : 3} /f`);
    await executeCmdCommand(`reg add "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\DataCollection" /v AllowTelemetry /t REG_DWORD /d ${enabled ? 0 : 3} /f`);
  }

  private async setDisableFeedback(enabled: boolean): Promise<void> {
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Siuf\\Rules" /v NumberOfSIUFInPeriod /t REG_DWORD /d ${enabled ? 0 : 1} /f`);
    await executeCmdCommand(`reg add "HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\DataCollection" /v DoNotShowFeedbackNotifications /t REG_DWORD /d ${enabled ? 1 : 0} /f`);
  }

  private async setDisableService(serviceName: string, enabled: boolean): Promise<void> {
    if (enabled) {
      try { await executeCmdCommand(`sc stop "${serviceName}"`); } catch {}
      await executeCmdCommand(`sc config "${serviceName}" start= disabled`);
    } else {
      await executeCmdCommand(`sc config "${serviceName}" start= demand`);
    }
  }

  private async setDisableRSSTasks(enabled: boolean): Promise<void> {
    // Tắt các scheduled tasks có thể gửi dữ liệu nền (ví dụ Feeds)
    const state = enabled ? 'Disable' : 'Enable';
    const tasks = [
      '\\Microsoft\\Windows\\Feeds\\FeedsSynchronizeTask',
      '\\Microsoft\\Windows\\Feeds\\FeedsRefreshTask',
      '\\Microsoft\\Windows\\Windows Error Reporting\\QueueReporting'
    ];
    for (const t of tasks) {
      try {
        await executeCmdCommand(`schtasks /Change /TN "${t}" /${state}`);
      } catch {}
    }
  }
  private async setSystemFastStartup(enabled: boolean): Promise<void> {
    const value = enabled ? 1 : 0;
    await executeCmdCommand(`reg add "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Power" /v HiberbootEnabled /t REG_DWORD /d ${value} /f`);
  }

  private async setSystemServicesOptimization(enabled: boolean): Promise<void> {
    if (enabled) {
      // Tắt các services không cần thiết
      const servicesToDisable = ['Fax', 'RemoteRegistry', 'WinRM', 'WSearch'];
      for (const service of servicesToDisable) {
        await executeCmdCommand(`sc config "${service}" start= disabled`);
      }
    }
  }

  private async setSystemIndexing(enabled: boolean): Promise<void> {
    if (enabled) {
      await executeCmdCommand(`sc config "WSearch" start= auto`);
      await executeCmdCommand(`sc start "WSearch"`);
    } else {
      await executeCmdCommand(`sc stop "WSearch"`);
      await executeCmdCommand(`sc config "WSearch" start= disabled`);
    }
  }

  private async setSystemGameMode(enabled: boolean): Promise<void> {
    const value = enabled ? 1 : 0;
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\GameBar" /v AllowAutoGameMode /t REG_DWORD /d ${value} /f`);
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\GameBar" /v AutoGameModeEnabled /t REG_DWORD /d ${value} /f`);
  }

  private async setSystemNetworkOptimization(enabled: boolean): Promise<void> {
    if (enabled) {
      // Khuyến nghị cho Windows 11
      await executeCmdCommand(`netsh int tcp set global autotuninglevel=normal`);
      await executeCmdCommand(`netsh int tcp set global rss=enabled`);
      await executeCmdCommand(`netsh int tcp set global rsc=enabled`);
      await executeCmdCommand(`netsh int tcp set global ecncapability=enabled`);
    } else {
      // Trả về cấu hình bảo thủ
      await executeCmdCommand(`netsh int tcp set global autotuninglevel=disabled`);
      await executeCmdCommand(`netsh int tcp set global rss=default`);
      await executeCmdCommand(`netsh int tcp set global rsc=disabled`);
      await executeCmdCommand(`netsh int tcp set global ecncapability=disabled`);
    }
  }

  private async setSystemDiskOptimization(enabled: boolean): Promise<void> {
    if (enabled) {
      await executeCmdCommand(`fsutil behavior set DisableLastAccess 1`);
      await executeCmdCommand(`fsutil behavior set EncryptPagingFile 0`);
    } else {
      await executeCmdCommand(`fsutil behavior set DisableLastAccess 0`);
      await executeCmdCommand(`fsutil behavior set EncryptPagingFile 1`);
    }
  }

  // Performance Optimization Methods
  private async setPerformanceVisualEffects(enabled: boolean): Promise<void> {
    const value = enabled ? 2 : 0; // 0=Best appearance, 2=Best performance
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VisualEffects" /v VisualFXSetting /t REG_DWORD /d ${value} /f`);
  }

  private async setPerformancePowerPlan(enabled: boolean): Promise<void> {
    if (enabled) {
      await executeCmdCommand(`powercfg /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c`); // High performance
    } else {
      await executeCmdCommand(`powercfg /setactive 381b4222-f694-41f0-9685-ff5bb260df2e`); // Balanced
    }
  }

  private async setPerformanceVirtualMemory(enabled: boolean): Promise<void> {
    if (enabled) {
      // Set virtual memory to system managed
      await executeCmdCommand(`wmic computersystem where name="%computername%" set AutomaticManagedPagefile=True`);
    }
  }

  private async setPerformanceRAMOptimization(enabled: boolean): Promise<void> {
    if (enabled) {
      await executeCmdCommand(`reg add "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management" /v LargeSystemCache /t REG_DWORD /d 1 /f`);
    } else {
      await executeCmdCommand(`reg add "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management" /v LargeSystemCache /t REG_DWORD /d 0 /f`);
    }
  }

  private async setPerformanceCPUOptimization(enabled: boolean): Promise<void> {
    if (enabled) {
      await executeCmdCommand(`reg add "HKLM\\SYSTEM\\CurrentControlSet\\Control\\PriorityControl" /v Win32PrioritySeparation /t REG_DWORD /d 38 /f`);
    } else {
      await executeCmdCommand(`reg add "HKLM\\SYSTEM\\CurrentControlSet\\Control\\PriorityControl" /v Win32PrioritySeparation /t REG_DWORD /d 2 /f`);
    }
  }

  private async setPerformanceGamingMode(enabled: boolean): Promise<void> {
    const value = enabled ? 1 : 0;
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\GameBar" /v AllowAutoGameMode /t REG_DWORD /d ${value} /f`);
    await executeCmdCommand(`reg add "HKCU\\System\\GameConfigStore" /v GameDVR_Enabled /t REG_DWORD /d ${value} /f`);
  }

  // Appearance Optimization Methods
  private async setAppearanceDarkMode(enabled: boolean): Promise<void> {
    const value = enabled ? 0 : 1; // 0=Dark, 1=Light
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize" /v AppsUseLightTheme /t REG_DWORD /d ${value} /f`);
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize" /v SystemUsesLightTheme /t REG_DWORD /d ${value} /f`);
  }

  private async setAppearanceTransparency(enabled: boolean): Promise<void> {
    const value = enabled ? 1 : 0;
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize" /v EnableTransparency /t REG_DWORD /d ${value} /f`);
  }

  private async setAppearanceAnimations(enabled: boolean): Promise<void> {
    const value = enabled ? 1 : 0;
    await executeCmdCommand(`reg add "HKCU\\Control Panel\\Desktop\\WindowMetrics" /v MinAnimate /t REG_DWORD /d ${value} /f`);
  }

  private async setAppearanceAccentColor(enabled: boolean): Promise<void> {
    if (enabled) {
      await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize" /v ColorPrevalence /t REG_DWORD /d 1 /f`);
    } else {
      await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize" /v ColorPrevalence /t REG_DWORD /d 0 /f`);
    }
  }

  private async setAppearanceCustomCursor(enabled: boolean): Promise<void> {
    if (enabled) {
      await executeCmdCommand(`reg add "HKCU\\Control Panel\\Cursors" /v Arrow /t REG_EXPAND_SZ /d "%SystemRoot%\\cursors\\aero_arrow.cur" /f`);
    } else {
      await executeCmdCommand(`reg delete "HKCU\\Control Panel\\Cursors" /v Arrow /f`);
    }
  }

  private async setAppearanceDesktopIcons(enabled: boolean): Promise<void> {
    const value = enabled ? 0 : 1; // 0=Show, 1=Hide
    await executeCmdCommand(`reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced" /v HideIcons /t REG_DWORD /d ${value} /f`);
  }
}
